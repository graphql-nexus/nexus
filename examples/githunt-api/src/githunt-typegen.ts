/**
 * This file is automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 * 
 * For better typings, you should provide configuration for how to lookup 
 * the types. See the documentation for "typegenAutoConfig"
 */


declare global {
  interface GraphQLNexusGen extends GraphQLNexusGenTypes {}
}

// Maybe Promise
export type MaybePromise<T> = T | PromiseLike<T>;

// Maybe Promise List
export type MaybePromiseList<T> = Array<MaybePromise<T>>;

// Maybe Thunk
export type MaybeThunk<T> = T | (() => T);

// Maybe Thunk, with args
export type MaybeThunkArgs<T, A> = T | ((args?: A) => T);

export type QueryCurrentUserReturnType = User_ReturnType;

export type QueryEntryReturnType = null | Entry_ReturnType;

export interface QueryEntryArgs {
  repoFullName: string;
}

export type QueryFeedReturnType = MaybePromiseList<Entry_ReturnType>;

export interface QueryFeedArgs {
  limit?: null | number;
  offset?: null | number;
  type: FeedType;
}

export type Query_ReturnType = {
  currentUser: MaybeThunk<MaybePromise<any>>;
  entry?: MaybeThunkArgs<MaybePromise<null | any>, QueryEntryArgs>;
}

export type UserAvatarUrlReturnType = string;

export type UserHtmlUrlReturnType = string;

export type UserLoginReturnType = string;

export interface UserRootType {
  avatar_url: string;
  html_url: string;
  login: string;
}

export type User_ReturnType = {
  avatar_url: MaybeThunk<MaybePromise<string>>;
  html_url: MaybeThunk<MaybePromise<string>>;
  login: MaybeThunk<MaybePromise<string>>;
}

export type EntryCommentCountReturnType = number;

export type EntryCommentsReturnType = MaybePromiseList<Comment_ReturnType>;

export interface EntryCommentsArgs {
  limit?: null | number;
  offset?: null | number;
}

export type EntryCreatedAtReturnType = number;

export type EntryHotScoreReturnType = number;

export type EntryIdReturnType = number;

export type EntryPostedByReturnType = null | User_ReturnType;

export type EntryRepositoryReturnType = Repository_ReturnType;

export type EntryScoreReturnType = number;

export type EntryVoteReturnType = Vote_ReturnType;

export interface EntryRootType {
  commentCount: number;
  comments: any[];
  createdAt: number;
  id: number;
  postedBy?: null | any;
  repository: any;
  score: number;
  vote: any;
}

export type Entry_ReturnType = {
  commentCount: MaybeThunk<MaybePromise<number>>;
  comments: MaybeThunkArgs<MaybePromise<any[]>, EntryCommentsArgs>;
  createdAt: MaybeThunk<MaybePromise<number>>;
  id: MaybeThunk<MaybePromise<number>>;
  postedBy?: MaybeThunk<MaybePromise<null | any>>;
  repository: MaybeThunk<MaybePromise<any>>;
  score: MaybeThunk<MaybePromise<number>>;
  vote: MaybeThunk<MaybePromise<any>>;
}

export type CommentContentReturnType = string;

export type CommentCreatedAtReturnType = number;

export type CommentIdReturnType = number;

export type CommentPostedByReturnType = null | User_ReturnType;

export type CommentRepoNameReturnType = string;

export interface CommentRootType {
  content: string;
  id: number;
  postedBy?: null | any;
  repoName: string;
}

export type Comment_ReturnType = {
  content: MaybeThunk<MaybePromise<string>>;
  id: MaybeThunk<MaybePromise<number>>;
  postedBy?: MaybeThunk<MaybePromise<null | any>>;
  repoName: MaybeThunk<MaybePromise<string>>;
}

export type RepositoryDescriptionReturnType = null | string;

export type RepositoryFullNameReturnType = string;

export type RepositoryHtmlUrlReturnType = string;

export type RepositoryNameReturnType = string;

export type RepositoryOpenIssuesCountReturnType = null | number;

export type RepositoryOwnerReturnType = null | User_ReturnType;

export type RepositoryStargazersCountReturnType = number;

export interface RepositoryRootType {
  description?: null | string;
  full_name: string;
  html_url: string;
  name: string;
  open_issues_count?: null | number;
  owner?: null | any;
  stargazers_count: number;
}

export type Repository_ReturnType = {
  description?: MaybeThunk<MaybePromise<null | string>>;
  full_name: MaybeThunk<MaybePromise<string>>;
  html_url: MaybeThunk<MaybePromise<string>>;
  name: MaybeThunk<MaybePromise<string>>;
  open_issues_count?: MaybeThunk<MaybePromise<null | number>>;
  owner?: MaybeThunk<MaybePromise<null | any>>;
  stargazers_count: MaybeThunk<MaybePromise<number>>;
}

export type VoteVoteValueReturnType = number;

export interface VoteRootType {
  vote_value: number;
}

export type Vote_ReturnType = {
  vote_value: MaybeThunk<MaybePromise<number>>;
}

export type FeedType = "HOT" | "NEW" | "TOP";

export type MutationSubmitCommentReturnType = Comment_ReturnType;

export interface MutationSubmitCommentArgs {
  commentContent: string;
  repoFullName: string;
}

export type MutationSubmitRepositoryReturnType = Entry_ReturnType;

export interface MutationSubmitRepositoryArgs {
  repoFullName: string;
}

export type MutationVoteReturnType = Entry_ReturnType;

export interface MutationVoteArgs {
  repoFullName: string;
  type: VoteType;
}

export type Mutation_ReturnType = {
  submitComment: MaybeThunkArgs<MaybePromise<any>, MutationSubmitCommentArgs>;
  submitRepository: MaybeThunkArgs<MaybePromise<any>, MutationSubmitRepositoryArgs>;
  vote: MaybeThunkArgs<MaybePromise<any>, MutationVoteArgs>;
}

export type VoteType = "CANCEL" | "DOWN" | "UP";

export type CacheControlScope = "PRIVATE" | "PUBLIC";

export interface GraphQLNexusGenArgTypes {
  Query: {
    entry: QueryEntryArgs;
    feed: QueryFeedArgs;
  };
  Entry: {
    comments: EntryCommentsArgs;
  };
  Mutation: {
    submitComment: MutationSubmitCommentArgs;
    submitRepository: MutationSubmitRepositoryArgs;
    vote: MutationVoteArgs;
  };
}

export interface GraphQLNexusGenRootTypes {
  Query: {};
  User: UserRootType;
  Entry: EntryRootType;
  Comment: CommentRootType;
  Repository: RepositoryRootType;
  Vote: VoteRootType;
  Mutation: {};
}

export interface GraphQLNexusGenReturnTypes {
  Query: {
    currentUser: QueryCurrentUserReturnType;
    entry: QueryEntryReturnType;
    feed: QueryFeedReturnType;
  };
  User: {
    avatar_url: UserAvatarUrlReturnType;
    html_url: UserHtmlUrlReturnType;
    login: UserLoginReturnType;
  };
  Entry: {
    commentCount: EntryCommentCountReturnType;
    comments: EntryCommentsReturnType;
    createdAt: EntryCreatedAtReturnType;
    hotScore: EntryHotScoreReturnType;
    id: EntryIdReturnType;
    postedBy: EntryPostedByReturnType;
    repository: EntryRepositoryReturnType;
    score: EntryScoreReturnType;
    vote: EntryVoteReturnType;
  };
  Comment: {
    content: CommentContentReturnType;
    createdAt: CommentCreatedAtReturnType;
    id: CommentIdReturnType;
    postedBy: CommentPostedByReturnType;
    repoName: CommentRepoNameReturnType;
  };
  Repository: {
    description: RepositoryDescriptionReturnType;
    full_name: RepositoryFullNameReturnType;
    html_url: RepositoryHtmlUrlReturnType;
    name: RepositoryNameReturnType;
    open_issues_count: RepositoryOpenIssuesCountReturnType;
    owner: RepositoryOwnerReturnType;
    stargazers_count: RepositoryStargazersCountReturnType;
  };
  Vote: {
    vote_value: VoteVoteValueReturnType;
  };
  Mutation: {
    submitComment: MutationSubmitCommentReturnType;
    submitRepository: MutationSubmitRepositoryReturnType;
    vote: MutationVoteReturnType;
  };
}

export interface GraphQLNexusGenTypes {
  argTypes: GraphQLNexusGenArgTypes;
  backingTypes: GraphQLNexusGenRootTypes;
  returnTypes: GraphQLNexusGenReturnTypes;
  context: unknown;
  enums: {
    FeedType: FeedType;
    VoteType: VoteType;
    CacheControlScope: CacheControlScope;
  };
  objects: {
    Query: {};
    User: UserRootType;
    Entry: EntryRootType;
    Comment: CommentRootType;
    Repository: RepositoryRootType;
    Vote: VoteRootType;
    Mutation: {};
  };
  interfaces: {};
  unions: {};
  scalars: {
    String: any;
    Int: any;
    Float: any;
    Boolean: any;
  };
  inputObjects: {};
  allInputTypes: 
    | Extract<keyof GraphQLNexusGenTypes['inputObjects'], string>
    | Extract<keyof GraphQLNexusGenTypes['enums'], string>
    | Extract<keyof GraphQLNexusGenTypes['scalars'], string>;
  allOutputTypes: 
    | Extract<keyof GraphQLNexusGenTypes['objects'], string>
    | Extract<keyof GraphQLNexusGenTypes['enums'], string>
    | Extract<keyof GraphQLNexusGenTypes['unions'], string>
    | Extract<keyof GraphQLNexusGenTypes['interfaces'], string>
    | Extract<keyof GraphQLNexusGenTypes['scalars'], string>;
}

export type Gen = GraphQLNexusGenTypes;
