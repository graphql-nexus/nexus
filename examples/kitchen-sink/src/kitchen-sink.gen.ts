/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import { UnusedInterfaceTypeDef } from './kitchen-sink-definitions'
import { core, connectionPluginCore } from '@nexus/schema'
import { QueryComplexity } from '@nexus/schema/dist/plugins/queryComplexityPlugin'
import { FieldAuthorizeResolver } from '@nexus/schema/dist/plugins/fieldAuthorizePlugin'
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<core.GetGen3<'inputTypes', TypeName, FieldName>>
    ): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "Date";
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  InputType: {
    // input type
    answer?: number | null // Int
    key: string // String!
    nestedInput?: NexusGenInputs['InputType2'] | null // InputType2
  }
  InputType2: {
    // input type
    answer?: number | null // Int
    key: string // String!
    someDate: NexusGenScalars['Date'] // Date!
  }
  NestedType: {
    // input type
    veryNested?: string | null // String
  }
  SomeArg: {
    // input type
    arg?: NexusGenInputs['NestedType'] | null // NestedType
    someField?: string | null // String
  }
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: Date
}

export interface NexusGenRootTypes {
  BooleanConnection: {
    // root type
    edges?: Array<NexusGenRootTypes['BooleanEdge'] | null> | null // [BooleanEdge]
    pageInfo: NexusGenRootTypes['PageInfo'] // PageInfo!
  }
  BooleanEdge: {
    // root type
    cursor: string // String!
    node?: boolean | null // Boolean
  }
  ComplexObject: {
    // root type
    id?: string | null // ID
  }
  DateConnection: {
    // root type
    edges?: Array<NexusGenRootTypes['DateEdge'] | null> | null // [DateEdge]
    pageInfo: NexusGenRootTypes['PageInfo'] // PageInfo!
  }
  DateEdge: {
    // root type
    cursor: string // String!
    node?: NexusGenScalars['Date'] | null // Date
  }
  Foo: {
    // root type
    name?: string | null // String
    ok?: boolean | null // Boolean
  }
  Mutation: {}
  PageInfo: {
    // root type
    endCursor?: string | null // String
    hasNextPage: boolean // Boolean!
    hasPreviousPage: boolean // Boolean!
    startCursor?: string | null // String
  }
  Query: {}
  SomeItem: {
    // root type
    id?: string | null // ID
  }
  TestObj: {
    // root type
    a?: NexusGenRootTypes['Bar'] | null // Bar
    item?: string | null // String
    ok?: boolean | null // Boolean
  }
  User: {
    // root type
    id?: string | null // ID
    name?: string | null // String
  }
  UserConnection: {
    // root type
    edges?: Array<NexusGenRootTypes['UserEdge'] | null> | null // [UserEdge]
    pageInfo: NexusGenRootTypes['PageInfo'] // PageInfo!
  }
  UserEdge: {
    // root type
    cursor: string // String!
    node?: NexusGenRootTypes['User'] | null // User
  }
  Bar: NexusGenRootTypes['Foo'] | NexusGenRootTypes['TestObj']
  Baz: NexusGenRootTypes['TestObj']
  Node: NexusGenRootTypes['TestObj']
  UnusedInterface: UnusedInterfaceTypeDef
  TestUnion: NexusGenRootTypes['Foo']
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  InputType: NexusGenInputs['InputType']
  InputType2: NexusGenInputs['InputType2']
  NestedType: NexusGenInputs['NestedType']
  SomeArg: NexusGenInputs['SomeArg']
  String: NexusGenScalars['String']
  Int: NexusGenScalars['Int']
  Float: NexusGenScalars['Float']
  Boolean: NexusGenScalars['Boolean']
  ID: NexusGenScalars['ID']
  Date: NexusGenScalars['Date']
}

export interface NexusGenFieldTypes {
  BooleanConnection: {
    // field return type
    edges: Array<NexusGenRootTypes['BooleanEdge'] | null> | null // [BooleanEdge]
    pageInfo: NexusGenRootTypes['PageInfo'] // PageInfo!
  }
  BooleanEdge: {
    // field return type
    cursor: string // String!
    node: boolean | null // Boolean
  }
  ComplexObject: {
    // field return type
    id: string | null // ID
  }
  DateConnection: {
    // field return type
    edges: Array<NexusGenRootTypes['DateEdge'] | null> | null // [DateEdge]
    pageInfo: NexusGenRootTypes['PageInfo'] // PageInfo!
  }
  DateEdge: {
    // field return type
    cursor: string // String!
    node: NexusGenScalars['Date'] | null // Date
  }
  Foo: {
    // field return type
    argsTest: boolean | null // Boolean
    name: string | null // String
    ok: boolean | null // Boolean
  }
  Mutation: {
    // field return type
    ok: boolean | null // Boolean
    someMutationField: NexusGenRootTypes['Foo'] | null // Foo
  }
  PageInfo: {
    // field return type
    endCursor: string | null // String
    hasNextPage: boolean // Boolean!
    hasPreviousPage: boolean // Boolean!
    startCursor: string | null // String
  }
  Query: {
    // field return type
    asArgExample: string | null // String
    bar: NexusGenRootTypes['TestObj'] | null // TestObj
    booleanConnection: NexusGenRootTypes['BooleanConnection'] | null // BooleanConnection
    complexQuery: Array<NexusGenRootTypes['ComplexObject'] | null> | null // [ComplexObject]
    dateAsList: Array<NexusGenScalars['Date'] | null> | null // [Date]
    extended: NexusGenRootTypes['SomeItem'] | null // SomeItem
    getNumberOrNull: number | null // Int
    guardedConnection: NexusGenRootTypes['DateConnection'] | null // DateConnection
    inlineArgs: string | null // String
    inputAsArgExample: string | null // String
    protectedField: number | null // Int
    userConnectionAdditionalArgs: NexusGenRootTypes['UserConnection'] | null // UserConnection
    userConnectionBackwardOnly: NexusGenRootTypes['UserConnection'] | null // UserConnection
    userConnectionForwardOnly: NexusGenRootTypes['UserConnection'] | null // UserConnection
    usersConnectionNodes: NexusGenRootTypes['UserConnection'] | null // UserConnection
    usersConnectionResolve: NexusGenRootTypes['UserConnection'] | null // UserConnection
  }
  SomeItem: {
    // field return type
    id: string | null // ID
  }
  TestObj: {
    // field return type
    a: NexusGenRootTypes['Bar'] | null // Bar
    argsTest: boolean | null // Boolean
    id: string // ID!
    item: string | null // String
    ok: boolean | null // Boolean
  }
  User: {
    // field return type
    id: string | null // ID
    name: string | null // String
  }
  UserConnection: {
    // field return type
    edges: Array<NexusGenRootTypes['UserEdge'] | null> | null // [UserEdge]
    pageInfo: NexusGenRootTypes['PageInfo'] // PageInfo!
  }
  UserEdge: {
    // field return type
    cursor: string // String!
    node: NexusGenRootTypes['User'] | null // User
  }
  Bar: {
    // field return type
    argsTest: boolean | null // Boolean
    ok: boolean | null // Boolean
  }
  Baz: {
    // field return type
    a: NexusGenRootTypes['Bar'] | null // Bar
    ok: boolean | null // Boolean
  }
  Node: {
    // field return type
    id: string // ID!
  }
  UnusedInterface: {
    // field return type
    ok: boolean | null // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  BooleanConnection: {
    // field return type name
    edges: 'BooleanEdge'
    pageInfo: 'PageInfo'
  }
  BooleanEdge: {
    // field return type name
    cursor: 'String'
    node: 'Boolean'
  }
  ComplexObject: {
    // field return type name
    id: 'ID'
  }
  DateConnection: {
    // field return type name
    edges: 'DateEdge'
    pageInfo: 'PageInfo'
  }
  DateEdge: {
    // field return type name
    cursor: 'String'
    node: 'Date'
  }
  Foo: {
    // field return type name
    argsTest: 'Boolean'
    name: 'String'
    ok: 'Boolean'
  }
  Mutation: {
    // field return type name
    ok: 'Boolean'
    someMutationField: 'Foo'
  }
  PageInfo: {
    // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Query: {
    // field return type name
    asArgExample: 'String'
    bar: 'TestObj'
    booleanConnection: 'BooleanConnection'
    complexQuery: 'ComplexObject'
    dateAsList: 'Date'
    extended: 'SomeItem'
    getNumberOrNull: 'Int'
    guardedConnection: 'DateConnection'
    inlineArgs: 'String'
    inputAsArgExample: 'String'
    protectedField: 'Int'
    userConnectionAdditionalArgs: 'UserConnection'
    userConnectionBackwardOnly: 'UserConnection'
    userConnectionForwardOnly: 'UserConnection'
    usersConnectionNodes: 'UserConnection'
    usersConnectionResolve: 'UserConnection'
  }
  SomeItem: {
    // field return type name
    id: 'ID'
  }
  TestObj: {
    // field return type name
    a: 'Bar'
    argsTest: 'Boolean'
    id: 'ID'
    item: 'String'
    ok: 'Boolean'
  }
  User: {
    // field return type name
    id: 'ID'
    name: 'String'
  }
  UserConnection: {
    // field return type name
    edges: 'UserEdge'
    pageInfo: 'PageInfo'
  }
  UserEdge: {
    // field return type name
    cursor: 'String'
    node: 'User'
  }
  Bar: {
    // field return type name
    argsTest: 'Boolean'
    ok: 'Boolean'
  }
  Baz: {
    // field return type name
    a: 'Bar'
    ok: 'Boolean'
  }
  Node: {
    // field return type name
    id: 'ID'
  }
  UnusedInterface: {
    // field return type name
    ok: 'Boolean'
  }
}

export interface NexusGenArgTypes {
  Foo: {
    argsTest: {
      // args
      a: NexusGenInputs['InputType'] | null // InputType
    }
  }
  Mutation: {
    someMutationField: {
      // args
      id: string // ID!
    }
  }
  Query: {
    asArgExample: {
      // args
      testAsArg: NexusGenInputs['InputType'] // InputType!
    }
    booleanConnection: {
      // args
      after?: string | null // String
      first: number // Int!
    }
    complexQuery: {
      // args
      count: number // Int!
    }
    getNumberOrNull: {
      // args
      a: number // Int!
    }
    guardedConnection: {
      // args
      after?: string | null // String
      first: number // Int!
    }
    inlineArgs: {
      // args
      someArg?: NexusGenInputs['SomeArg'] | null // SomeArg
    }
    inputAsArgExample: {
      // args
      testInput?: NexusGenInputs['InputType'] | null // InputType
      testScalar?: string | null // String
    }
    userConnectionAdditionalArgs: {
      // args
      after?: string | null // String
      first: number // Int!
      isEven?: boolean | null // Boolean
    }
    userConnectionBackwardOnly: {
      // args
      before?: string | null // String
      last: number // Int!
    }
    userConnectionForwardOnly: {
      // args
      after?: string | null // String
      first: number // Int!
    }
    usersConnectionNodes: {
      // args
      after?: string | null // String
      before?: string | null // String
      first?: number | null // Int
      last?: number | null // Int
    }
    usersConnectionResolve: {
      // args
      after?: string | null // String
      before?: string | null // String
      first?: number | null // Int
      last?: number | null // Int
    }
  }
  TestObj: {
    argsTest: {
      // args
      a: NexusGenInputs['InputType'] | null // InputType
    }
  }
  Bar: {
    argsTest: {
      // args
      a: NexusGenInputs['InputType'] | null // InputType
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  TestUnion: 'Foo'
  Bar: 'Foo' | 'TestObj'
  Baz: 'TestObj'
  Node: 'TestObj'
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames =
  | 'BooleanConnection'
  | 'BooleanEdge'
  | 'ComplexObject'
  | 'DateConnection'
  | 'DateEdge'
  | 'Foo'
  | 'Mutation'
  | 'PageInfo'
  | 'Query'
  | 'SomeItem'
  | 'TestObj'
  | 'User'
  | 'UserConnection'
  | 'UserEdge'

export type NexusGenInputNames = 'InputType' | 'InputType2' | 'NestedType' | 'SomeArg'

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = 'Bar' | 'Baz' | 'Node' | 'UnusedInterface'

export type NexusGenScalarNames = 'Boolean' | 'Date' | 'Float' | 'ID' | 'Int' | 'String'

export type NexusGenUnionNames = 'TestUnion'

export interface NexusGenTypes {
  context: any
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  fieldTypeNames: NexusGenFieldTypeNames
  allTypes: NexusGenAllTypes
  inheritedFields: NexusGenInheritedFields
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
    node?: string | core.FieldResolver<TypeName, any>
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * The complexity for an individual field. Return a number
     * or a function that returns a number to specify the
     * complexity for this field.
     */
    complexity?: QueryComplexity<TypeName, FieldName>
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    /**
     * The nullability guard can be helpful, but is also a potentially expensive operation for lists.
     * We need to iterate the entire list to check for null items to guard against. Set this to true
     * to skip the null guard on a specific field if you know there's no potential for unsafe types.
     */
    skipNullGuard?: boolean
  }
  interface NexusGenPluginSchemaConfig {}
}
