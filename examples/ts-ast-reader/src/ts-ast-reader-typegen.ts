/**
 * This file is automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 * 
 * For better typings, you should provide configuration for how to lookup 
 * the types. See the documentation for "typegenAutoConfig"
 */
import * as t from "./types/index"
import ts from "typescript"

declare global {
  interface GraphQLNexusGen extends GraphQLNexusGenTypes {}
}

// Maybe Promise
export type MaybePromise<T> = T | PromiseLike<T>;

// Maybe Promise List
export type MaybePromiseList<T> = Array<MaybePromise<T>>;

// Maybe Thunk
export type MaybeThunk<T> = T | (() => T);

// Maybe Thunk, with args
export type MaybeThunkArgs<T, A> = T | ((args?: A) => T);

export type QueryParseFileReturnType = SourceFile_ReturnType;

export interface QueryParseFileArgs {
  file: string;
}

export type Query_ReturnType = {};

export type SourceFileEndReturnType = number;

export type SourceFileFlagsReturnType = NodeFlags;

export type SourceFileKindReturnType = SyntaxKind;

export type SourceFileKindCodeReturnType = number;

export type SourceFileModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface SourceFileModifiersArgs extends NodeModifiersArgs {}

export type SourceFileNameReturnType = null | DeclarationNameReturnType;

export type SourceFileNameTextReturnType = null | string;

export type SourceFileParentReturnType = Node_ReturnType;

export type SourceFilePosReturnType = number;

export type SourceFileRawTextReturnType = string;

export interface SourceFileRawTextArgs extends NodeRawTextArgs {}

export type SourceFileStatementsReturnType = MaybePromiseList<Node_ReturnType>;

export interface SourceFileStatementsArgs {
  only?: null | SyntaxKind[];
  skip?: null | SyntaxKind[];
}

export type SourceFileTypeNameReturnType = null | DeclarationNameReturnType;

export type SourceFileRootType = ts.SourceFile;

export type SourceFile_ReturnType = ts.SourceFile

export type NodeEndReturnType = number;

export type NodeFlagsReturnType = NodeFlags;

export type NodeKindReturnType = SyntaxKind;

export type NodeKindCodeReturnType = number;

export type NodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface NodeModifiersArgs {
  only?: null | SyntaxKind[];
  skip?: null | SyntaxKind[];
}

export type NodeNameReturnType = null | DeclarationNameReturnType;

export type NodeNameTextReturnType = null | string;

export type NodeParentReturnType = Node_ReturnType;

export type NodePosReturnType = number;

export type NodeRawTextReturnType = string;

export interface NodeRawTextArgs {
  only?: null | SyntaxKind[];
  skip?: null | SyntaxKind[];
}

export type NodeTypeNameReturnType = null | DeclarationNameReturnType;

export type NodeFlags = 4194304 | 16384 | 3 | 2 | 64 | 12679168 | 8192 | 2048 | 32 | 512 | 262144 | 1024 | 256 | 128 | 8388608 | 65536 | 2097152 | 16777216 | 1 | 16 | 4 | 0 | 1572864 | 524288 | 1048576 | 1408 | 384 | 8 | 32768 | 131072 | 20480 | 4194816 | 4096;

export type SyntaxKind = 118 | 54 | 69 | 49 | 120 | 185 | 187 | 169 | 197 | 212 | 119 | 63 | 41 | 62 | 40 | 121 | 58 | 201 | 122 | 55 | 70 | 50 | 146 | 9 | 204 | 186 | 218 | 123 | 73 | 229 | 280 | 191 | 160 | 71 | 51 | 246 | 271 | 74 | 274 | 75 | 240 | 209 | 76 | 19 | 23 | 21 | 57 | 309 | 27 | 149 | 205 | 175 | 7 | 77 | 157 | 124 | 166 | 161 | 78 | 228 | 312 | 79 | 236 | 125 | 152 | 272 | 80 | 198 | 81 | 82 | 223 | 25 | 24 | 190 | 83 | 220 | 311 | 1 | 243 | 84 | 278 | 35 | 33 | 37 | 59 | 36 | 34 | 52 | 254 | 255 | 85 | 257 | 221 | 211 | 86 | 259 | 87 | 88 | 59 | 28 | 60 | 118 | 109 | 283 | 294 | 73 | 8 | 148 | 18 | 73 | 14 | 0 | 2 | 163 | 226 | 89 | 227 | 225 | 144 | 239 | 196 | 90 | 165 | 158 | 126 | 145 | 32 | 67 | 68 | 48 | 47 | 30 | 273 | 72 | 91 | 222 | 109 | 250 | 249 | 248 | 92 | 253 | 183 | 180 | 162 | 127 | 176 | 93 | 282 | 94 | 241 | 110 | 174 | 128 | 284 | 295 | 297 | 296 | 291 | 298 | 289 | 287 | 286 | 288 | 299 | 305 | 300 | 293 | 294 | 303 | 301 | 304 | 283 | 292 | 302 | 285 | 290 | 267 | 268 | 263 | 266 | 260 | 270 | 264 | 262 | 265 | 261 | 269 | 11 | 12 | 129 | 233 | 71 | 71 | 71 | 147 | 117 | 305 | 305 | 147 | 14 | 71 | 108 | 17 | 147 | 7 | 183 | 31 | 66 | 46 | 29 | 28 | 111 | 182 | 181 | 310 | 214 | 156 | 155 | 61 | 45 | 39 | 258 | 245 | 244 | 130 | 3 | 256 | 252 | 247 | 251 | 131 | 132 | 192 | 95 | 4 | 213 | 14 | 307 | 96 | 135 | 8 | 184 | 136 | 188 | 147 | 210 | 18 | 22 | 20 | 171 | 112 | 151 | 195 | 177 | 308 | 65 | 43 | 60 | 44 | 38 | 203 | 202 | 113 | 189 | 275 | 154 | 153 | 114 | 115 | 148 | 56 | 133 | 13 | 134 | 172 | 97 | 230 | 217 | 26 | 159 | 137 | 6 | 276 | 2 | 64 | 42 | 279 | 277 | 208 | 116 | 138 | 10 | 98 | 99 | 232 | 139 | 306 | 215 | 193 | 206 | 15 | 16 | 216 | 17 | 100 | 178 | 101 | 234 | 53 | 102 | 103 | 235 | 170 | 242 | 194 | 140 | 168 | 199 | 104 | 179 | 150 | 163 | 167 | 164 | 141 | 173 | 142 | 0 | 143 | 281 | 237 | 238 | 219 | 105 | 200 | 106 | 107 | 224 | 5 | 108 | 231 | 207 | 117;

export type TokenKindReturnType = SyntaxKind;

export type TokenRootType = ts.Token<any>;

export type Token_ReturnType = ts.Token<any>

export type DeclarationNameRootType = BindingPatternRootType | ComputedPropertyNameRootType | IdentifierRootType | NumericLiteralRootType | QualifiedNameRootType | StringLiteralLikeRootType | UnnamedNodeRootType;

export type DeclarationNameReturnType = BindingPattern_ReturnType | ComputedPropertyName_ReturnType | Identifier_ReturnType | NumericLiteral_ReturnType | QualifiedName_ReturnType | StringLiteralLike_ReturnType | UnnamedNode_ReturnType;

export type BindingPatternEndReturnType = number;

export type BindingPatternFlagsReturnType = NodeFlags;

export type BindingPatternKindReturnType = SyntaxKind;

export type BindingPatternKindCodeReturnType = number;

export type BindingPatternModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface BindingPatternModifiersArgs extends NodeModifiersArgs {}

export type BindingPatternNameReturnType = null | DeclarationNameReturnType;

export type BindingPatternNameTextReturnType = null | string;

export type BindingPatternParentReturnType = Node_ReturnType;

export type BindingPatternPosReturnType = number;

export type BindingPatternRawTextReturnType = string;

export interface BindingPatternRawTextArgs extends NodeRawTextArgs {}

export type BindingPatternTypeNameReturnType = null | DeclarationNameReturnType;

export type BindingPatternRootType = ts.BindingPattern;

export type BindingPattern_ReturnType = ts.BindingPattern

export type ComputedPropertyNameEndReturnType = number;

export type ComputedPropertyNameFlagsReturnType = NodeFlags;

export type ComputedPropertyNameKindReturnType = SyntaxKind;

export type ComputedPropertyNameKindCodeReturnType = number;

export type ComputedPropertyNameModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ComputedPropertyNameModifiersArgs extends NodeModifiersArgs {}

export type ComputedPropertyNameNameReturnType = null | DeclarationNameReturnType;

export type ComputedPropertyNameNameTextReturnType = null | string;

export type ComputedPropertyNameParentReturnType = Node_ReturnType;

export type ComputedPropertyNamePosReturnType = number;

export type ComputedPropertyNameRawTextReturnType = string;

export interface ComputedPropertyNameRawTextArgs extends NodeRawTextArgs {}

export type ComputedPropertyNameTypeNameReturnType = null | DeclarationNameReturnType;

export type ComputedPropertyNameRootType = ts.ComputedPropertyName;

export type ComputedPropertyName_ReturnType = ts.ComputedPropertyName

export type IdentifierEndReturnType = number;

export type IdentifierFlagsReturnType = NodeFlags;

export type IdentifierKindReturnType = SyntaxKind;

export type IdentifierKindCodeReturnType = number;

export type IdentifierModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface IdentifierModifiersArgs extends NodeModifiersArgs {}

export type IdentifierNameReturnType = null | DeclarationNameReturnType;

export type IdentifierNameTextReturnType = null | string;

export type IdentifierParentReturnType = Node_ReturnType;

export type IdentifierPosReturnType = number;

export type IdentifierRawTextReturnType = string;

export interface IdentifierRawTextArgs extends NodeRawTextArgs {}

export type IdentifierTextReturnType = string;

export type IdentifierTypeNameReturnType = null | DeclarationNameReturnType;

export type IdentifierRootType = ts.Identifier;

export type Identifier_ReturnType = ts.Identifier

export type NumericLiteralEndReturnType = number;

export type NumericLiteralFlagsReturnType = NodeFlags;

export type NumericLiteralKindReturnType = SyntaxKind;

export type NumericLiteralKindCodeReturnType = number;

export type NumericLiteralModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface NumericLiteralModifiersArgs extends NodeModifiersArgs {}

export type NumericLiteralNameReturnType = null | DeclarationNameReturnType;

export type NumericLiteralNameTextReturnType = null | string;

export type NumericLiteralParentReturnType = Node_ReturnType;

export type NumericLiteralPosReturnType = number;

export type NumericLiteralRawTextReturnType = string;

export interface NumericLiteralRawTextArgs extends NodeRawTextArgs {}

export type NumericLiteralTypeNameReturnType = null | DeclarationNameReturnType;

export type NumericLiteralRootType = ts.NumericLiteral;

export type NumericLiteral_ReturnType = ts.NumericLiteral

export type QualifiedNameEndReturnType = number;

export type QualifiedNameFlagsReturnType = NodeFlags;

export type QualifiedNameKindReturnType = SyntaxKind;

export type QualifiedNameKindCodeReturnType = number;

export type QualifiedNameModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface QualifiedNameModifiersArgs extends NodeModifiersArgs {}

export type QualifiedNameNameReturnType = null | DeclarationNameReturnType;

export type QualifiedNameNameTextReturnType = null | string;

export type QualifiedNameParentReturnType = Node_ReturnType;

export type QualifiedNamePosReturnType = number;

export type QualifiedNameRawTextReturnType = string;

export interface QualifiedNameRawTextArgs extends NodeRawTextArgs {}

export type QualifiedNameTypeNameReturnType = null | DeclarationNameReturnType;

export type QualifiedNameRootType = ts.QualifiedName;

export type QualifiedName_ReturnType = ts.QualifiedName

export type StringLiteralLikeEndReturnType = number;

export type StringLiteralLikeFlagsReturnType = NodeFlags;

export type StringLiteralLikeKindReturnType = SyntaxKind;

export type StringLiteralLikeKindCodeReturnType = number;

export type StringLiteralLikeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface StringLiteralLikeModifiersArgs extends NodeModifiersArgs {}

export type StringLiteralLikeNameReturnType = null | DeclarationNameReturnType;

export type StringLiteralLikeNameTextReturnType = null | string;

export type StringLiteralLikeParentReturnType = Node_ReturnType;

export type StringLiteralLikePosReturnType = number;

export type StringLiteralLikeRawTextReturnType = string;

export interface StringLiteralLikeRawTextArgs extends NodeRawTextArgs {}

export type StringLiteralLikeTypeNameReturnType = null | DeclarationNameReturnType;

export type StringLiteralLikeRootType = ts.StringLiteralLike;

export type StringLiteralLike_ReturnType = ts.StringLiteralLike

export type UnnamedNodeTextReturnType = null | string;

export interface UnnamedNodeRootType {
  text?: null | string;
}

export type UnnamedNode_ReturnType = {
  text?: MaybeThunk<MaybePromise<null | string>>;
}

export type ArrayTypeNodeElementTypeReturnType = Node_ReturnType;

export type ArrayTypeNodeEndReturnType = number;

export type ArrayTypeNodeFlagsReturnType = NodeFlags;

export type ArrayTypeNodeKindReturnType = SyntaxKind;

export type ArrayTypeNodeKindCodeReturnType = number;

export type ArrayTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ArrayTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type ArrayTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type ArrayTypeNodeNameTextReturnType = null | string;

export type ArrayTypeNodeParentReturnType = Node_ReturnType;

export type ArrayTypeNodePosReturnType = number;

export type ArrayTypeNodeRawTextReturnType = string;

export interface ArrayTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ArrayTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type ArrayTypeNodeRootType = ts.ArrayTypeNode;

export type ArrayTypeNode_ReturnType = ts.ArrayTypeNode

export type CallSignatureDeclarationEndReturnType = number;

export type CallSignatureDeclarationFlagsReturnType = NodeFlags;

export type CallSignatureDeclarationKindReturnType = SyntaxKind;

export type CallSignatureDeclarationKindCodeReturnType = number;

export type CallSignatureDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface CallSignatureDeclarationModifiersArgs extends NodeModifiersArgs {}

export type CallSignatureDeclarationNameReturnType = null | DeclarationNameReturnType;

export type CallSignatureDeclarationNameTextReturnType = null | string;

export type CallSignatureDeclarationParentReturnType = Node_ReturnType;

export type CallSignatureDeclarationPosReturnType = number;

export type CallSignatureDeclarationRawTextReturnType = string;

export interface CallSignatureDeclarationRawTextArgs extends NodeRawTextArgs {}

export type CallSignatureDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type CallSignatureDeclarationRootType = ts.CallSignatureDeclaration;

export type CallSignatureDeclaration_ReturnType = ts.CallSignatureDeclaration

export type ClassDeclarationEndReturnType = number;

export type ClassDeclarationFlagsReturnType = NodeFlags;

export type ClassDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type ClassDeclarationKindReturnType = SyntaxKind;

export type ClassDeclarationKindCodeReturnType = number;

export type ClassDeclarationMembersReturnType = MaybePromiseList<Node_ReturnType>;

export interface ClassDeclarationMembersArgs {
  only?: null | SyntaxKind[];
  skip?: null | SyntaxKind[];
}

export type ClassDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ClassDeclarationModifiersArgs extends NodeModifiersArgs {}

export type ClassDeclarationNameReturnType = null | DeclarationNameReturnType;

export type ClassDeclarationNameTextReturnType = null | string;

export type ClassDeclarationParentReturnType = Node_ReturnType;

export type ClassDeclarationPosReturnType = number;

export type ClassDeclarationRawTextReturnType = string;

export interface ClassDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ClassDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type ClassDeclarationRootType = ts.ClassDeclaration;

export type ClassDeclaration_ReturnType = ts.ClassDeclaration

export type HasJSDocJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type JSDocCommentReturnType = null | string;

export type JSDocTagsReturnType = null | MaybePromiseList<JSDocTag_ReturnType>;

export type JSDocRootType = ts.JSDoc;

export type JSDoc_ReturnType = ts.JSDoc

export type JSDocTagCommentReturnType = null | string;

export type JSDocTagTagNameReturnType = null | string;

export type ConditionalTypeNodeCheckTypeReturnType = Node_ReturnType;

export type ConditionalTypeNodeEndReturnType = number;

export type ConditionalTypeNodeExtendsTypeReturnType = Node_ReturnType;

export type ConditionalTypeNodeFalseTypeReturnType = Node_ReturnType;

export type ConditionalTypeNodeFlagsReturnType = NodeFlags;

export type ConditionalTypeNodeKindReturnType = SyntaxKind;

export type ConditionalTypeNodeKindCodeReturnType = number;

export type ConditionalTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ConditionalTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type ConditionalTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type ConditionalTypeNodeNameTextReturnType = null | string;

export type ConditionalTypeNodeParentReturnType = Node_ReturnType;

export type ConditionalTypeNodePosReturnType = number;

export type ConditionalTypeNodeRawTextReturnType = string;

export interface ConditionalTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ConditionalTypeNodeTrueTypeReturnType = Node_ReturnType;

export type ConditionalTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type ConditionalTypeNodeRootType = ts.ConditionalTypeNode;

export type ConditionalTypeNode_ReturnType = ts.ConditionalTypeNode

export type ConstructorDeclarationAsteriskTokenReturnType = null | Token_ReturnType;

export type ConstructorDeclarationEndReturnType = number;

export type ConstructorDeclarationExclamationTokenReturnType = null | Token_ReturnType;

export type ConstructorDeclarationFlagsReturnType = NodeFlags;

export type ConstructorDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type ConstructorDeclarationKindReturnType = SyntaxKind;

export type ConstructorDeclarationKindCodeReturnType = number;

export type ConstructorDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ConstructorDeclarationModifiersArgs extends NodeModifiersArgs {}

export type ConstructorDeclarationNameReturnType = null | DeclarationNameReturnType;

export type ConstructorDeclarationNameTextReturnType = null | string;

export type ConstructorDeclarationParametersReturnType = MaybePromiseList<ParameterDeclaration_ReturnType>;

export type ConstructorDeclarationParentReturnType = Node_ReturnType;

export type ConstructorDeclarationPosReturnType = number;

export type ConstructorDeclarationQuestionTokenReturnType = null | Token_ReturnType;

export type ConstructorDeclarationRawTextReturnType = string;

export interface ConstructorDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ConstructorDeclarationTypeReturnType = null | Node_ReturnType;

export type ConstructorDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type ConstructorDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclaration_ReturnType>;

export type ConstructorDeclarationRootType = ts.ConstructorDeclaration;

export type ConstructorDeclaration_ReturnType = ts.ConstructorDeclaration

export type MaybeOptionalQuestionTokenReturnType = null | Token_ReturnType;

export type ParameterDeclarationEndReturnType = number;

export type ParameterDeclarationFlagsReturnType = NodeFlags;

export type ParameterDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type ParameterDeclarationKindReturnType = SyntaxKind;

export type ParameterDeclarationKindCodeReturnType = number;

export type ParameterDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ParameterDeclarationModifiersArgs extends NodeModifiersArgs {}

export type ParameterDeclarationNameReturnType = null | DeclarationNameReturnType;

export type ParameterDeclarationNameTextReturnType = null | string;

export type ParameterDeclarationParentReturnType = Node_ReturnType;

export type ParameterDeclarationPosReturnType = number;

export type ParameterDeclarationRawTextReturnType = string;

export interface ParameterDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ParameterDeclarationTypeReturnType = null | Node_ReturnType;

export type ParameterDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type ParameterDeclarationRootType = ts.ParameterDeclaration;

export type ParameterDeclaration_ReturnType = ts.ParameterDeclaration

export type TypeParameterDeclarationConstraintReturnType = Node_ReturnType;

export type TypeParameterDeclarationDefaultReturnType = Node_ReturnType;

export type TypeParameterDeclarationEndReturnType = number;

export type TypeParameterDeclarationExpressionReturnType = Node_ReturnType;

export type TypeParameterDeclarationFlagsReturnType = NodeFlags;

export type TypeParameterDeclarationKindReturnType = SyntaxKind;

export type TypeParameterDeclarationKindCodeReturnType = number;

export type TypeParameterDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface TypeParameterDeclarationModifiersArgs extends NodeModifiersArgs {}

export type TypeParameterDeclarationNameReturnType = null | DeclarationNameReturnType;

export type TypeParameterDeclarationNameTextReturnType = null | string;

export type TypeParameterDeclarationParentReturnType = Node_ReturnType;

export type TypeParameterDeclarationPosReturnType = number;

export type TypeParameterDeclarationRawTextReturnType = string;

export interface TypeParameterDeclarationRawTextArgs extends NodeRawTextArgs {}

export type TypeParameterDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type TypeParameterDeclarationRootType = ts.TypeParameterDeclaration;

export type TypeParameterDeclaration_ReturnType = ts.TypeParameterDeclaration

export type ConstructorTypeNodeEndReturnType = number;

export type ConstructorTypeNodeFlagsReturnType = NodeFlags;

export type ConstructorTypeNodeKindReturnType = SyntaxKind;

export type ConstructorTypeNodeKindCodeReturnType = number;

export type ConstructorTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ConstructorTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type ConstructorTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type ConstructorTypeNodeNameTextReturnType = null | string;

export type ConstructorTypeNodeParentReturnType = Node_ReturnType;

export type ConstructorTypeNodePosReturnType = number;

export type ConstructorTypeNodeRawTextReturnType = string;

export interface ConstructorTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ConstructorTypeNodeTypeReturnType = Node_ReturnType;

export type ConstructorTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type ConstructorTypeNodeRootType = ts.ConstructorTypeNode;

export type ConstructorTypeNode_ReturnType = ts.ConstructorTypeNode

export type ConstructSignatureDeclarationEndReturnType = number;

export type ConstructSignatureDeclarationFlagsReturnType = NodeFlags;

export type ConstructSignatureDeclarationKindReturnType = SyntaxKind;

export type ConstructSignatureDeclarationKindCodeReturnType = number;

export type ConstructSignatureDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ConstructSignatureDeclarationModifiersArgs extends NodeModifiersArgs {}

export type ConstructSignatureDeclarationNameReturnType = null | DeclarationNameReturnType;

export type ConstructSignatureDeclarationNameTextReturnType = null | string;

export type ConstructSignatureDeclarationParentReturnType = Node_ReturnType;

export type ConstructSignatureDeclarationPosReturnType = number;

export type ConstructSignatureDeclarationRawTextReturnType = string;

export interface ConstructSignatureDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ConstructSignatureDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type ConstructSignatureDeclarationRootType = ts.ConstructSignatureDeclaration;

export type ConstructSignatureDeclaration_ReturnType = ts.ConstructSignatureDeclaration

export type EnumDeclarationEndReturnType = number;

export type EnumDeclarationFlagsReturnType = NodeFlags;

export type EnumDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type EnumDeclarationKindReturnType = SyntaxKind;

export type EnumDeclarationKindCodeReturnType = number;

export type EnumDeclarationMembersReturnType = MaybePromiseList<Node_ReturnType>;

export type EnumDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface EnumDeclarationModifiersArgs extends NodeModifiersArgs {}

export type EnumDeclarationNameReturnType = null | DeclarationNameReturnType;

export type EnumDeclarationNameTextReturnType = null | string;

export type EnumDeclarationParentReturnType = Node_ReturnType;

export type EnumDeclarationPosReturnType = number;

export type EnumDeclarationRawTextReturnType = string;

export interface EnumDeclarationRawTextArgs extends NodeRawTextArgs {}

export type EnumDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type EnumDeclarationRootType = ts.EnumDeclaration;

export type EnumDeclaration_ReturnType = ts.EnumDeclaration

export type ExportAssignmentEndReturnType = number;

export type ExportAssignmentFlagsReturnType = NodeFlags;

export type ExportAssignmentKindReturnType = SyntaxKind;

export type ExportAssignmentKindCodeReturnType = number;

export type ExportAssignmentModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ExportAssignmentModifiersArgs extends NodeModifiersArgs {}

export type ExportAssignmentNameReturnType = null | DeclarationNameReturnType;

export type ExportAssignmentNameTextReturnType = null | string;

export type ExportAssignmentParentReturnType = Node_ReturnType;

export type ExportAssignmentPosReturnType = number;

export type ExportAssignmentRawTextReturnType = string;

export interface ExportAssignmentRawTextArgs extends NodeRawTextArgs {}

export type ExportAssignmentTypeNameReturnType = null | DeclarationNameReturnType;

export type ExportAssignmentRootType = ts.ExportAssignment;

export type ExportAssignment_ReturnType = ts.ExportAssignment

export type ExportDeclarationEndReturnType = number;

export type ExportDeclarationFlagsReturnType = NodeFlags;

export type ExportDeclarationKindReturnType = SyntaxKind;

export type ExportDeclarationKindCodeReturnType = number;

export type ExportDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ExportDeclarationModifiersArgs extends NodeModifiersArgs {}

export type ExportDeclarationNameReturnType = null | DeclarationNameReturnType;

export type ExportDeclarationNameTextReturnType = null | string;

export type ExportDeclarationParentReturnType = Node_ReturnType;

export type ExportDeclarationPosReturnType = number;

export type ExportDeclarationRawTextReturnType = string;

export interface ExportDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ExportDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type ExportDeclarationRootType = ts.ExportDeclaration;

export type ExportDeclaration_ReturnType = ts.ExportDeclaration

export type FunctionDeclarationAsteriskTokenReturnType = null | Token_ReturnType;

export type FunctionDeclarationEndReturnType = number;

export type FunctionDeclarationExclamationTokenReturnType = null | Token_ReturnType;

export type FunctionDeclarationFlagsReturnType = NodeFlags;

export type FunctionDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type FunctionDeclarationKindReturnType = SyntaxKind;

export type FunctionDeclarationKindCodeReturnType = number;

export type FunctionDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface FunctionDeclarationModifiersArgs extends NodeModifiersArgs {}

export type FunctionDeclarationNameReturnType = null | DeclarationNameReturnType;

export type FunctionDeclarationNameTextReturnType = null | string;

export type FunctionDeclarationParametersReturnType = MaybePromiseList<ParameterDeclaration_ReturnType>;

export type FunctionDeclarationParentReturnType = Node_ReturnType;

export type FunctionDeclarationPosReturnType = number;

export type FunctionDeclarationQuestionTokenReturnType = null | Token_ReturnType;

export type FunctionDeclarationRawTextReturnType = string;

export interface FunctionDeclarationRawTextArgs extends NodeRawTextArgs {}

export type FunctionDeclarationTypeReturnType = null | Node_ReturnType;

export type FunctionDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type FunctionDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclaration_ReturnType>;

export type FunctionDeclarationRootType = ts.FunctionDeclaration;

export type FunctionDeclaration_ReturnType = ts.FunctionDeclaration

export type FunctionTypeNodeEndReturnType = number;

export type FunctionTypeNodeFlagsReturnType = NodeFlags;

export type FunctionTypeNodeKindReturnType = SyntaxKind;

export type FunctionTypeNodeKindCodeReturnType = number;

export type FunctionTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface FunctionTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type FunctionTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type FunctionTypeNodeNameTextReturnType = null | string;

export type FunctionTypeNodeParentReturnType = Node_ReturnType;

export type FunctionTypeNodePosReturnType = number;

export type FunctionTypeNodeRawTextReturnType = string;

export interface FunctionTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type FunctionTypeNodeTypeReturnType = Node_ReturnType;

export type FunctionTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type FunctionTypeNodeRootType = ts.FunctionTypeNode;

export type FunctionTypeNode_ReturnType = ts.FunctionTypeNode

export type GetAccessorDeclarationAsteriskTokenReturnType = null | Token_ReturnType;

export type GetAccessorDeclarationEndReturnType = number;

export type GetAccessorDeclarationExclamationTokenReturnType = null | Token_ReturnType;

export type GetAccessorDeclarationFlagsReturnType = NodeFlags;

export type GetAccessorDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type GetAccessorDeclarationKindReturnType = SyntaxKind;

export type GetAccessorDeclarationKindCodeReturnType = number;

export type GetAccessorDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface GetAccessorDeclarationModifiersArgs extends NodeModifiersArgs {}

export type GetAccessorDeclarationNameReturnType = null | DeclarationNameReturnType;

export type GetAccessorDeclarationNameTextReturnType = null | string;

export type GetAccessorDeclarationParametersReturnType = MaybePromiseList<ParameterDeclaration_ReturnType>;

export type GetAccessorDeclarationParentReturnType = Node_ReturnType;

export type GetAccessorDeclarationPosReturnType = number;

export type GetAccessorDeclarationQuestionTokenReturnType = null | Token_ReturnType;

export type GetAccessorDeclarationRawTextReturnType = string;

export interface GetAccessorDeclarationRawTextArgs extends NodeRawTextArgs {}

export type GetAccessorDeclarationTypeReturnType = null | Node_ReturnType;

export type GetAccessorDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type GetAccessorDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclaration_ReturnType>;

export type GetAccessorDeclarationRootType = ts.GetAccessorDeclaration;

export type GetAccessorDeclaration_ReturnType = ts.GetAccessorDeclaration

export type ImportDeclarationEndReturnType = number;

export type ImportDeclarationFlagsReturnType = NodeFlags;

export type ImportDeclarationKindReturnType = SyntaxKind;

export type ImportDeclarationKindCodeReturnType = number;

export type ImportDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ImportDeclarationModifiersArgs extends NodeModifiersArgs {}

export type ImportDeclarationNameReturnType = null | DeclarationNameReturnType;

export type ImportDeclarationNameTextReturnType = null | string;

export type ImportDeclarationParentReturnType = Node_ReturnType;

export type ImportDeclarationPosReturnType = number;

export type ImportDeclarationRawTextReturnType = string;

export interface ImportDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ImportDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type ImportDeclarationRootType = ts.ImportDeclaration;

export type ImportDeclaration_ReturnType = ts.ImportDeclaration

export type ImportEqualsDeclarationEndReturnType = number;

export type ImportEqualsDeclarationFlagsReturnType = NodeFlags;

export type ImportEqualsDeclarationKindReturnType = SyntaxKind;

export type ImportEqualsDeclarationKindCodeReturnType = number;

export type ImportEqualsDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ImportEqualsDeclarationModifiersArgs extends NodeModifiersArgs {}

export type ImportEqualsDeclarationNameReturnType = null | DeclarationNameReturnType;

export type ImportEqualsDeclarationNameTextReturnType = null | string;

export type ImportEqualsDeclarationParentReturnType = Node_ReturnType;

export type ImportEqualsDeclarationPosReturnType = number;

export type ImportEqualsDeclarationRawTextReturnType = string;

export interface ImportEqualsDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ImportEqualsDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type ImportEqualsDeclarationRootType = ts.ImportEqualsDeclaration;

export type ImportEqualsDeclaration_ReturnType = ts.ImportEqualsDeclaration

export type ImportTypeNodeEndReturnType = number;

export type ImportTypeNodeFlagsReturnType = NodeFlags;

export type ImportTypeNodeKindReturnType = SyntaxKind;

export type ImportTypeNodeKindCodeReturnType = number;

export type ImportTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ImportTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type ImportTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type ImportTypeNodeNameTextReturnType = null | string;

export type ImportTypeNodeParentReturnType = Node_ReturnType;

export type ImportTypeNodePosReturnType = number;

export type ImportTypeNodeRawTextReturnType = string;

export interface ImportTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ImportTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type ImportTypeNodeRootType = ts.ImportTypeNode;

export type ImportTypeNode_ReturnType = ts.ImportTypeNode

export type IndexedAccessTypeNodeEndReturnType = number;

export type IndexedAccessTypeNodeFlagsReturnType = NodeFlags;

export type IndexedAccessTypeNodeKindReturnType = SyntaxKind;

export type IndexedAccessTypeNodeKindCodeReturnType = number;

export type IndexedAccessTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface IndexedAccessTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type IndexedAccessTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type IndexedAccessTypeNodeNameTextReturnType = null | string;

export type IndexedAccessTypeNodeParentReturnType = Node_ReturnType;

export type IndexedAccessTypeNodePosReturnType = number;

export type IndexedAccessTypeNodeRawTextReturnType = string;

export interface IndexedAccessTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type IndexedAccessTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type IndexedAccessTypeNodeRootType = ts.IndexedAccessTypeNode;

export type IndexedAccessTypeNode_ReturnType = ts.IndexedAccessTypeNode

export type IndexSignatureDeclarationEndReturnType = number;

export type IndexSignatureDeclarationFlagsReturnType = NodeFlags;

export type IndexSignatureDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type IndexSignatureDeclarationKindReturnType = SyntaxKind;

export type IndexSignatureDeclarationKindCodeReturnType = number;

export type IndexSignatureDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface IndexSignatureDeclarationModifiersArgs extends NodeModifiersArgs {}

export type IndexSignatureDeclarationNameReturnType = null | DeclarationNameReturnType;

export type IndexSignatureDeclarationNameTextReturnType = null | string;

export type IndexSignatureDeclarationParentReturnType = Node_ReturnType;

export type IndexSignatureDeclarationPosReturnType = number;

export type IndexSignatureDeclarationRawTextReturnType = string;

export interface IndexSignatureDeclarationRawTextArgs extends NodeRawTextArgs {}

export type IndexSignatureDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type IndexSignatureDeclarationRootType = ts.IndexSignatureDeclaration;

export type IndexSignatureDeclaration_ReturnType = ts.IndexSignatureDeclaration

export type InferTypeNodeEndReturnType = number;

export type InferTypeNodeFlagsReturnType = NodeFlags;

export type InferTypeNodeKindReturnType = SyntaxKind;

export type InferTypeNodeKindCodeReturnType = number;

export type InferTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface InferTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type InferTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type InferTypeNodeNameTextReturnType = null | string;

export type InferTypeNodeParentReturnType = Node_ReturnType;

export type InferTypeNodePosReturnType = number;

export type InferTypeNodeRawTextReturnType = string;

export interface InferTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type InferTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type InferTypeNodeTypeParameterReturnType = Node_ReturnType;

export type InferTypeNodeRootType = ts.InferTypeNode;

export type InferTypeNode_ReturnType = ts.InferTypeNode

export type InterfaceDeclarationEndReturnType = number;

export type InterfaceDeclarationFlagsReturnType = NodeFlags;

export type InterfaceDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type InterfaceDeclarationKindReturnType = SyntaxKind;

export type InterfaceDeclarationKindCodeReturnType = number;

export type InterfaceDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface InterfaceDeclarationModifiersArgs extends NodeModifiersArgs {}

export type InterfaceDeclarationNameReturnType = null | DeclarationNameReturnType;

export type InterfaceDeclarationNameTextReturnType = null | string;

export type InterfaceDeclarationParentReturnType = Node_ReturnType;

export type InterfaceDeclarationPosReturnType = number;

export type InterfaceDeclarationRawTextReturnType = string;

export interface InterfaceDeclarationRawTextArgs extends NodeRawTextArgs {}

export type InterfaceDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type InterfaceDeclarationRootType = ts.InterfaceDeclaration;

export type InterfaceDeclaration_ReturnType = ts.InterfaceDeclaration

export type IntersectionTypeNodeEndReturnType = number;

export type IntersectionTypeNodeFlagsReturnType = NodeFlags;

export type IntersectionTypeNodeKindReturnType = SyntaxKind;

export type IntersectionTypeNodeKindCodeReturnType = number;

export type IntersectionTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface IntersectionTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type IntersectionTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type IntersectionTypeNodeNameTextReturnType = null | string;

export type IntersectionTypeNodeParentReturnType = Node_ReturnType;

export type IntersectionTypeNodePosReturnType = number;

export type IntersectionTypeNodeRawTextReturnType = string;

export interface IntersectionTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type IntersectionTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type IntersectionTypeNodeTypesReturnType = MaybePromiseList<Node_ReturnType>;

export type IntersectionTypeNodeRootType = ts.IntersectionTypeNode;

export type IntersectionTypeNode_ReturnType = ts.IntersectionTypeNode

export type JSDocAugmentsTagCommentReturnType = null | string;

export type JSDocAugmentsTagTagNameReturnType = null | string;

export type JSDocAugmentsTagRootType = ts.JSDocAugmentsTag;

export type JSDocAugmentsTag_ReturnType = ts.JSDocAugmentsTag

export type JSDocClassTagCommentReturnType = null | string;

export type JSDocClassTagTagNameReturnType = null | string;

export type JSDocClassTagRootType = ts.JSDocClassTag;

export type JSDocClassTag_ReturnType = ts.JSDocClassTag

export type JSDocEnumTagCommentReturnType = null | string;

export type JSDocEnumTagTagNameReturnType = null | string;

export type JSDocEnumTagRootType = ts.JSDocEnumTag;

export type JSDocEnumTag_ReturnType = ts.JSDocEnumTag

export type JSDocNamespaceDeclarationEndReturnType = number;

export type JSDocNamespaceDeclarationFlagsReturnType = NodeFlags;

export type JSDocNamespaceDeclarationKindReturnType = SyntaxKind;

export type JSDocNamespaceDeclarationKindCodeReturnType = number;

export type JSDocNamespaceDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface JSDocNamespaceDeclarationModifiersArgs extends NodeModifiersArgs {}

export type JSDocNamespaceDeclarationNameReturnType = null | DeclarationNameReturnType;

export type JSDocNamespaceDeclarationNameTextReturnType = null | string;

export type JSDocNamespaceDeclarationParentReturnType = Node_ReturnType;

export type JSDocNamespaceDeclarationPosReturnType = number;

export type JSDocNamespaceDeclarationRawTextReturnType = string;

export interface JSDocNamespaceDeclarationRawTextArgs extends NodeRawTextArgs {}

export type JSDocNamespaceDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type JSDocNamespaceDeclarationRootType = ts.JSDocNamespaceDeclaration;

export type JSDocNamespaceDeclaration_ReturnType = ts.JSDocNamespaceDeclaration

export type JSDocReturnTagCommentReturnType = null | string;

export type JSDocReturnTagTagNameReturnType = null | string;

export type JSDocReturnTagRootType = ts.JSDocReturnTag;

export type JSDocReturnTag_ReturnType = ts.JSDocReturnTag

export type JSDocTemplateTagCommentReturnType = null | string;

export type JSDocTemplateTagTagNameReturnType = null | string;

export type JSDocTemplateTagRootType = ts.JSDocTemplateTag;

export type JSDocTemplateTag_ReturnType = ts.JSDocTemplateTag

export type JSDocThisTagCommentReturnType = null | string;

export type JSDocThisTagTagNameReturnType = null | string;

export type JSDocThisTagRootType = ts.JSDocThisTag;

export type JSDocThisTag_ReturnType = ts.JSDocThisTag

export type JSDocTypeTagCommentReturnType = null | string;

export type JSDocTypeTagTagNameReturnType = null | string;

export type JSDocTypeTagRootType = ts.JSDocTypeTag;

export type JSDocTypeTag_ReturnType = ts.JSDocTypeTag

export type JSDocUnknownTagCommentReturnType = null | string;

export type JSDocUnknownTagTagNameReturnType = null | string;

export type JSDocUnknownTagRootType = ts.JSDocUnknownTag;

export type JSDocUnknownTag_ReturnType = ts.JSDocUnknownTag

export type KeywordTypeNodeEndReturnType = number;

export type KeywordTypeNodeFlagsReturnType = NodeFlags;

export type KeywordTypeNodeKindReturnType = SyntaxKind;

export type KeywordTypeNodeKindCodeReturnType = number;

export type KeywordTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface KeywordTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type KeywordTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type KeywordTypeNodeNameTextReturnType = null | string;

export type KeywordTypeNodeParentReturnType = Node_ReturnType;

export type KeywordTypeNodePosReturnType = number;

export type KeywordTypeNodeRawTextReturnType = string;

export interface KeywordTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type KeywordTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type KeywordTypeNodeRootType = ts.KeywordTypeNode;

export type KeywordTypeNode_ReturnType = ts.KeywordTypeNode

export type LiteralTypeEndReturnType = number;

export type LiteralTypeFlagsReturnType = NodeFlags;

export type LiteralTypeKindReturnType = SyntaxKind;

export type LiteralTypeKindCodeReturnType = number;

export type LiteralTypeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface LiteralTypeModifiersArgs extends NodeModifiersArgs {}

export type LiteralTypeNameReturnType = null | DeclarationNameReturnType;

export type LiteralTypeNameTextReturnType = null | string;

export type LiteralTypeParentReturnType = Node_ReturnType;

export type LiteralTypePosReturnType = number;

export type LiteralTypeRawTextReturnType = string;

export interface LiteralTypeRawTextArgs extends NodeRawTextArgs {}

export type LiteralTypeTypeNameReturnType = null | DeclarationNameReturnType;

export type LiteralTypeRootType = ts.LiteralTypeNode;

export type LiteralType_ReturnType = ts.LiteralTypeNode

export type MappedTypeNodeEndReturnType = number;

export type MappedTypeNodeFlagsReturnType = NodeFlags;

export type MappedTypeNodeKindReturnType = SyntaxKind;

export type MappedTypeNodeKindCodeReturnType = number;

export type MappedTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface MappedTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type MappedTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type MappedTypeNodeNameTextReturnType = null | string;

export type MappedTypeNodeParentReturnType = Node_ReturnType;

export type MappedTypeNodePosReturnType = number;

export type MappedTypeNodeRawTextReturnType = string;

export interface MappedTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type MappedTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type MappedTypeNodeRootType = ts.MappedTypeNode;

export type MappedTypeNode_ReturnType = ts.MappedTypeNode

export type MethodDeclarationAsteriskTokenReturnType = null | Token_ReturnType;

export type MethodDeclarationEndReturnType = number;

export type MethodDeclarationExclamationTokenReturnType = null | Token_ReturnType;

export type MethodDeclarationFlagsReturnType = NodeFlags;

export type MethodDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type MethodDeclarationKindReturnType = SyntaxKind;

export type MethodDeclarationKindCodeReturnType = number;

export type MethodDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface MethodDeclarationModifiersArgs extends NodeModifiersArgs {}

export type MethodDeclarationNameReturnType = null | DeclarationNameReturnType;

export type MethodDeclarationNameTextReturnType = null | string;

export type MethodDeclarationParametersReturnType = MaybePromiseList<ParameterDeclaration_ReturnType>;

export type MethodDeclarationParentReturnType = Node_ReturnType;

export type MethodDeclarationPosReturnType = number;

export type MethodDeclarationQuestionTokenReturnType = null | Token_ReturnType;

export type MethodDeclarationRawTextReturnType = string;

export interface MethodDeclarationRawTextArgs extends NodeRawTextArgs {}

export type MethodDeclarationTypeReturnType = null | Node_ReturnType;

export type MethodDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type MethodDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclaration_ReturnType>;

export type MethodDeclarationRootType = ts.MethodDeclaration;

export type MethodDeclaration_ReturnType = ts.MethodDeclaration

export type MissingDeclarationEndReturnType = number;

export type MissingDeclarationFlagsReturnType = NodeFlags;

export type MissingDeclarationKindReturnType = SyntaxKind;

export type MissingDeclarationKindCodeReturnType = number;

export type MissingDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface MissingDeclarationModifiersArgs extends NodeModifiersArgs {}

export type MissingDeclarationNameReturnType = null | DeclarationNameReturnType;

export type MissingDeclarationNameTextReturnType = null | string;

export type MissingDeclarationParentReturnType = Node_ReturnType;

export type MissingDeclarationPosReturnType = number;

export type MissingDeclarationRawTextReturnType = string;

export interface MissingDeclarationRawTextArgs extends NodeRawTextArgs {}

export type MissingDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type MissingDeclarationRootType = ts.MissingDeclaration;

export type MissingDeclaration_ReturnType = ts.MissingDeclaration

export type ModuleDeclarationEndReturnType = number;

export type ModuleDeclarationFlagsReturnType = NodeFlags;

export type ModuleDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type ModuleDeclarationKindReturnType = SyntaxKind;

export type ModuleDeclarationKindCodeReturnType = number;

export type ModuleDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ModuleDeclarationModifiersArgs extends NodeModifiersArgs {}

export type ModuleDeclarationNameReturnType = null | DeclarationNameReturnType;

export type ModuleDeclarationNameTextReturnType = null | string;

export type ModuleDeclarationParentReturnType = Node_ReturnType;

export type ModuleDeclarationPosReturnType = number;

export type ModuleDeclarationRawTextReturnType = string;

export interface ModuleDeclarationRawTextArgs extends NodeRawTextArgs {}

export type ModuleDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type ModuleDeclarationRootType = ts.ModuleDeclaration;

export type ModuleDeclaration_ReturnType = ts.ModuleDeclaration

export type NamespaceDeclarationEndReturnType = number;

export type NamespaceDeclarationFlagsReturnType = NodeFlags;

export type NamespaceDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type NamespaceDeclarationKindReturnType = SyntaxKind;

export type NamespaceDeclarationKindCodeReturnType = number;

export type NamespaceDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface NamespaceDeclarationModifiersArgs extends NodeModifiersArgs {}

export type NamespaceDeclarationNameReturnType = null | DeclarationNameReturnType;

export type NamespaceDeclarationNameTextReturnType = null | string;

export type NamespaceDeclarationParentReturnType = Node_ReturnType;

export type NamespaceDeclarationPosReturnType = number;

export type NamespaceDeclarationRawTextReturnType = string;

export interface NamespaceDeclarationRawTextArgs extends NodeRawTextArgs {}

export type NamespaceDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type NamespaceDeclarationRootType = ts.NamespaceDeclaration;

export type NamespaceDeclaration_ReturnType = ts.NamespaceDeclaration

export type NamespaceExportDeclarationEndReturnType = number;

export type NamespaceExportDeclarationFlagsReturnType = NodeFlags;

export type NamespaceExportDeclarationKindReturnType = SyntaxKind;

export type NamespaceExportDeclarationKindCodeReturnType = number;

export type NamespaceExportDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface NamespaceExportDeclarationModifiersArgs extends NodeModifiersArgs {}

export type NamespaceExportDeclarationNameReturnType = null | DeclarationNameReturnType;

export type NamespaceExportDeclarationNameTextReturnType = null | string;

export type NamespaceExportDeclarationParentReturnType = Node_ReturnType;

export type NamespaceExportDeclarationPosReturnType = number;

export type NamespaceExportDeclarationRawTextReturnType = string;

export interface NamespaceExportDeclarationRawTextArgs extends NodeRawTextArgs {}

export type NamespaceExportDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type NamespaceExportDeclarationRootType = ts.NamespaceExportDeclaration;

export type NamespaceExportDeclaration_ReturnType = ts.NamespaceExportDeclaration

export type OptionalTypeNodeEndReturnType = number;

export type OptionalTypeNodeFlagsReturnType = NodeFlags;

export type OptionalTypeNodeKindReturnType = SyntaxKind;

export type OptionalTypeNodeKindCodeReturnType = number;

export type OptionalTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface OptionalTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type OptionalTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type OptionalTypeNodeNameTextReturnType = null | string;

export type OptionalTypeNodeParentReturnType = Node_ReturnType;

export type OptionalTypeNodePosReturnType = number;

export type OptionalTypeNodeRawTextReturnType = string;

export interface OptionalTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type OptionalTypeNodeTypeReturnType = Node_ReturnType;

export type OptionalTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type OptionalTypeNodeRootType = ts.OptionalTypeNode;

export type OptionalTypeNode_ReturnType = ts.OptionalTypeNode

export type ParenthesizedTypeEndReturnType = number;

export type ParenthesizedTypeFlagsReturnType = NodeFlags;

export type ParenthesizedTypeKindReturnType = SyntaxKind;

export type ParenthesizedTypeKindCodeReturnType = number;

export type ParenthesizedTypeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ParenthesizedTypeModifiersArgs extends NodeModifiersArgs {}

export type ParenthesizedTypeNameReturnType = null | DeclarationNameReturnType;

export type ParenthesizedTypeNameTextReturnType = null | string;

export type ParenthesizedTypeParentReturnType = Node_ReturnType;

export type ParenthesizedTypePosReturnType = number;

export type ParenthesizedTypeRawTextReturnType = string;

export interface ParenthesizedTypeRawTextArgs extends NodeRawTextArgs {}

export type ParenthesizedTypeTypeReturnType = Node_ReturnType;

export type ParenthesizedTypeTypeNameReturnType = null | DeclarationNameReturnType;

export type ParenthesizedTypeRootType = ts.ParenthesizedTypeNode;

export type ParenthesizedType_ReturnType = ts.ParenthesizedTypeNode

export type PropertyDeclarationEndReturnType = number;

export type PropertyDeclarationFlagsReturnType = NodeFlags;

export type PropertyDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type PropertyDeclarationKindReturnType = SyntaxKind;

export type PropertyDeclarationKindCodeReturnType = number;

export type PropertyDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface PropertyDeclarationModifiersArgs extends NodeModifiersArgs {}

export type PropertyDeclarationNameReturnType = null | DeclarationNameReturnType;

export type PropertyDeclarationNameTextReturnType = null | string;

export type PropertyDeclarationParentReturnType = Node_ReturnType;

export type PropertyDeclarationPosReturnType = number;

export type PropertyDeclarationQuestionTokenReturnType = null | Token_ReturnType;

export type PropertyDeclarationRawTextReturnType = string;

export interface PropertyDeclarationRawTextArgs extends NodeRawTextArgs {}

export type PropertyDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type PropertyDeclarationRootType = ts.PropertyDeclaration;

export type PropertyDeclaration_ReturnType = ts.PropertyDeclaration

export type PropertyLikeDeclarationEndReturnType = number;

export type PropertyLikeDeclarationFlagsReturnType = NodeFlags;

export type PropertyLikeDeclarationKindReturnType = SyntaxKind;

export type PropertyLikeDeclarationKindCodeReturnType = number;

export type PropertyLikeDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface PropertyLikeDeclarationModifiersArgs extends NodeModifiersArgs {}

export type PropertyLikeDeclarationNameReturnType = null | DeclarationNameReturnType;

export type PropertyLikeDeclarationNameTextReturnType = null | string;

export type PropertyLikeDeclarationParentReturnType = Node_ReturnType;

export type PropertyLikeDeclarationPosReturnType = number;

export type PropertyLikeDeclarationRawTextReturnType = string;

export interface PropertyLikeDeclarationRawTextArgs extends NodeRawTextArgs {}

export type PropertyLikeDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type PropertyLikeDeclarationRootType = ts.PropertyLikeDeclaration;

export type PropertyLikeDeclaration_ReturnType = ts.PropertyLikeDeclaration

export type PropertySignatureEndReturnType = number;

export type PropertySignatureFlagsReturnType = NodeFlags;

export type PropertySignatureJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type PropertySignatureKindReturnType = SyntaxKind;

export type PropertySignatureKindCodeReturnType = number;

export type PropertySignatureModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface PropertySignatureModifiersArgs extends NodeModifiersArgs {}

export type PropertySignatureNameReturnType = null | DeclarationNameReturnType;

export type PropertySignatureNameTextReturnType = null | string;

export type PropertySignatureParentReturnType = Node_ReturnType;

export type PropertySignaturePosReturnType = number;

export type PropertySignatureQuestionTokenReturnType = null | Token_ReturnType;

export type PropertySignatureRawTextReturnType = string;

export interface PropertySignatureRawTextArgs extends NodeRawTextArgs {}

export type PropertySignatureTypeReturnType = null | Node_ReturnType;

export type PropertySignatureTypeNameReturnType = null | DeclarationNameReturnType;

export type PropertySignatureRootType = ts.PropertySignature;

export type PropertySignature_ReturnType = ts.PropertySignature

export type RestTypeNodeEndReturnType = number;

export type RestTypeNodeFlagsReturnType = NodeFlags;

export type RestTypeNodeKindReturnType = SyntaxKind;

export type RestTypeNodeKindCodeReturnType = number;

export type RestTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface RestTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type RestTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type RestTypeNodeNameTextReturnType = null | string;

export type RestTypeNodeParentReturnType = Node_ReturnType;

export type RestTypeNodePosReturnType = number;

export type RestTypeNodeRawTextReturnType = string;

export interface RestTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type RestTypeNodeTypeReturnType = Node_ReturnType;

export type RestTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type RestTypeNodeRootType = ts.RestTypeNode;

export type RestTypeNode_ReturnType = ts.RestTypeNode

export type SetAccessorDeclarationAsteriskTokenReturnType = null | Token_ReturnType;

export type SetAccessorDeclarationEndReturnType = number;

export type SetAccessorDeclarationExclamationTokenReturnType = null | Token_ReturnType;

export type SetAccessorDeclarationFlagsReturnType = NodeFlags;

export type SetAccessorDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type SetAccessorDeclarationKindReturnType = SyntaxKind;

export type SetAccessorDeclarationKindCodeReturnType = number;

export type SetAccessorDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface SetAccessorDeclarationModifiersArgs extends NodeModifiersArgs {}

export type SetAccessorDeclarationNameReturnType = null | DeclarationNameReturnType;

export type SetAccessorDeclarationNameTextReturnType = null | string;

export type SetAccessorDeclarationParametersReturnType = MaybePromiseList<ParameterDeclaration_ReturnType>;

export type SetAccessorDeclarationParentReturnType = Node_ReturnType;

export type SetAccessorDeclarationPosReturnType = number;

export type SetAccessorDeclarationQuestionTokenReturnType = null | Token_ReturnType;

export type SetAccessorDeclarationRawTextReturnType = string;

export interface SetAccessorDeclarationRawTextArgs extends NodeRawTextArgs {}

export type SetAccessorDeclarationTypeReturnType = null | Node_ReturnType;

export type SetAccessorDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type SetAccessorDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclaration_ReturnType>;

export type SetAccessorDeclarationRootType = ts.SetAccessorDeclaration;

export type SetAccessorDeclaration_ReturnType = ts.SetAccessorDeclaration

export type StringLiteralEndReturnType = number;

export type StringLiteralFlagsReturnType = NodeFlags;

export type StringLiteralKindReturnType = SyntaxKind;

export type StringLiteralKindCodeReturnType = number;

export type StringLiteralModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface StringLiteralModifiersArgs extends NodeModifiersArgs {}

export type StringLiteralNameReturnType = null | DeclarationNameReturnType;

export type StringLiteralNameTextReturnType = null | string;

export type StringLiteralParentReturnType = Node_ReturnType;

export type StringLiteralPosReturnType = number;

export type StringLiteralRawTextReturnType = string;

export interface StringLiteralRawTextArgs extends NodeRawTextArgs {}

export type StringLiteralTypeNameReturnType = null | DeclarationNameReturnType;

export type StringLiteralRootType = ts.StringLiteral;

export type StringLiteral_ReturnType = ts.StringLiteral

export type ThisTypeNodeEndReturnType = number;

export type ThisTypeNodeFlagsReturnType = NodeFlags;

export type ThisTypeNodeKindReturnType = SyntaxKind;

export type ThisTypeNodeKindCodeReturnType = number;

export type ThisTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface ThisTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type ThisTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type ThisTypeNodeNameTextReturnType = null | string;

export type ThisTypeNodeParentReturnType = Node_ReturnType;

export type ThisTypeNodePosReturnType = number;

export type ThisTypeNodeRawTextReturnType = string;

export interface ThisTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type ThisTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type ThisTypeNodeRootType = ts.ThisTypeNode;

export type ThisTypeNode_ReturnType = ts.ThisTypeNode

export type TupleTypeNodeElementTypesReturnType = MaybePromiseList<Node_ReturnType>;

export type TupleTypeNodeEndReturnType = number;

export type TupleTypeNodeFlagsReturnType = NodeFlags;

export type TupleTypeNodeKindReturnType = SyntaxKind;

export type TupleTypeNodeKindCodeReturnType = number;

export type TupleTypeNodeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface TupleTypeNodeModifiersArgs extends NodeModifiersArgs {}

export type TupleTypeNodeNameReturnType = null | DeclarationNameReturnType;

export type TupleTypeNodeNameTextReturnType = null | string;

export type TupleTypeNodeParentReturnType = Node_ReturnType;

export type TupleTypeNodePosReturnType = number;

export type TupleTypeNodeRawTextReturnType = string;

export interface TupleTypeNodeRawTextArgs extends NodeRawTextArgs {}

export type TupleTypeNodeTypeNameReturnType = null | DeclarationNameReturnType;

export type TupleTypeNodeRootType = ts.TupleTypeNode;

export type TupleTypeNode_ReturnType = ts.TupleTypeNode

export type TypeAliasDeclarationEndReturnType = number;

export type TypeAliasDeclarationFlagsReturnType = NodeFlags;

export type TypeAliasDeclarationJsDocReturnType = null | MaybePromiseList<JSDoc_ReturnType>;

export type TypeAliasDeclarationKindReturnType = SyntaxKind;

export type TypeAliasDeclarationKindCodeReturnType = number;

export type TypeAliasDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface TypeAliasDeclarationModifiersArgs extends NodeModifiersArgs {}

export type TypeAliasDeclarationNameReturnType = null | DeclarationNameReturnType;

export type TypeAliasDeclarationNameTextReturnType = null | string;

export type TypeAliasDeclarationParentReturnType = Node_ReturnType;

export type TypeAliasDeclarationPosReturnType = number;

export type TypeAliasDeclarationRawTextReturnType = string;

export interface TypeAliasDeclarationRawTextArgs extends NodeRawTextArgs {}

export type TypeAliasDeclarationTypeReturnType = null | Node_ReturnType;

export type TypeAliasDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type TypeAliasDeclarationTypeParametersReturnType = null | MaybePromiseList<TypeParameterDeclaration_ReturnType>;

export type TypeAliasDeclarationRootType = ts.TypeAliasDeclaration;

export type TypeAliasDeclaration_ReturnType = ts.TypeAliasDeclaration

export type TypeLiteralEndReturnType = number;

export type TypeLiteralFlagsReturnType = NodeFlags;

export type TypeLiteralKindReturnType = SyntaxKind;

export type TypeLiteralKindCodeReturnType = number;

export type TypeLiteralModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface TypeLiteralModifiersArgs extends NodeModifiersArgs {}

export type TypeLiteralNameReturnType = null | DeclarationNameReturnType;

export type TypeLiteralNameTextReturnType = null | string;

export type TypeLiteralParentReturnType = Node_ReturnType;

export type TypeLiteralPosReturnType = number;

export type TypeLiteralRawTextReturnType = string;

export interface TypeLiteralRawTextArgs extends NodeRawTextArgs {}

export type TypeLiteralTypeNameReturnType = null | DeclarationNameReturnType;

export type TypeLiteralRootType = ts.TypeLiteralNode;

export type TypeLiteral_ReturnType = ts.TypeLiteralNode

export type TypeReferenceEndReturnType = number;

export type TypeReferenceFlagsReturnType = NodeFlags;

export type TypeReferenceKindReturnType = SyntaxKind;

export type TypeReferenceKindCodeReturnType = number;

export type TypeReferenceModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface TypeReferenceModifiersArgs extends NodeModifiersArgs {}

export type TypeReferenceNameReturnType = null | DeclarationNameReturnType;

export type TypeReferenceNameTextReturnType = null | string;

export type TypeReferenceParentReturnType = Node_ReturnType;

export type TypeReferencePosReturnType = number;

export type TypeReferenceRawTextReturnType = string;

export interface TypeReferenceRawTextArgs extends NodeRawTextArgs {}

export type TypeReferenceTextReturnType = null | string;

export type TypeReferenceTypeArgumentsReturnType = null | MaybePromiseList<Node_ReturnType>;

export type TypeReferenceTypeNameReturnType = null | DeclarationNameReturnType;

export type TypeReferenceRootType = ts.TypeReferenceNode;

export type TypeReference_ReturnType = ts.TypeReferenceNode

export type UnionTypeEndReturnType = number;

export type UnionTypeFlagsReturnType = NodeFlags;

export type UnionTypeKindReturnType = SyntaxKind;

export type UnionTypeKindCodeReturnType = number;

export type UnionTypeModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface UnionTypeModifiersArgs extends NodeModifiersArgs {}

export type UnionTypeNameReturnType = null | DeclarationNameReturnType;

export type UnionTypeNameTextReturnType = null | string;

export type UnionTypeParentReturnType = Node_ReturnType;

export type UnionTypePosReturnType = number;

export type UnionTypeRawTextReturnType = string;

export interface UnionTypeRawTextArgs extends NodeRawTextArgs {}

export type UnionTypeTypeNameReturnType = null | DeclarationNameReturnType;

export type UnionTypeTypesReturnType = MaybePromiseList<Node_ReturnType>;

export type UnionTypeRootType = ts.UnionTypeNode;

export type UnionType_ReturnType = ts.UnionTypeNode

export type UNKNOWN_NODEEndReturnType = number;

export type UNKNOWN_NODEFlagsReturnType = NodeFlags;

export type UNKNOWN_NODEKindReturnType = SyntaxKind;

export type UNKNOWN_NODEKindCodeReturnType = number;

export type UNKNOWN_NODEModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface UNKNOWN_NODEModifiersArgs extends NodeModifiersArgs {}

export type UNKNOWN_NODENameReturnType = null | DeclarationNameReturnType;

export type UNKNOWN_NODENameTextReturnType = null | string;

export type UNKNOWN_NODEParentReturnType = Node_ReturnType;

export type UNKNOWN_NODEPosReturnType = number;

export type UNKNOWN_NODERawTextReturnType = string;

export interface UNKNOWN_NODERawTextArgs extends NodeRawTextArgs {}

export type UNKNOWN_NODETypeNameReturnType = null | DeclarationNameReturnType;

export interface UNKNOWN_NODERootType {
  end: number;
  flags: NodeFlags;
  kind: SyntaxKind;
  kindCode: number;
  modifiers?: null | any[];
  name?: null | any;
  nameText?: null | string;
  parent: any;
  pos: number;
  rawText: string;
  typeName?: null | any;
}

export type UNKNOWN_NODE_ReturnType = {
  end: MaybeThunk<MaybePromise<number>>;
  flags: MaybeThunk<MaybePromise<NodeFlags>>;
  kind: MaybeThunk<MaybePromise<SyntaxKind>>;
  kindCode: MaybeThunk<MaybePromise<number>>;
  modifiers?: MaybeThunkArgs<MaybePromise<null | any[]>, UNKNOWN_NODEModifiersArgs>;
  name?: MaybeThunk<MaybePromise<null | any>>;
  nameText?: MaybeThunk<MaybePromise<null | string>>;
  parent: MaybeThunk<MaybePromise<any>>;
  pos: MaybeThunk<MaybePromise<number>>;
  rawText: MaybeThunkArgs<MaybePromise<string>, UNKNOWN_NODERawTextArgs>;
  typeName?: MaybeThunk<MaybePromise<null | any>>;
}

export type VariableDeclarationEndReturnType = number;

export type VariableDeclarationFlagsReturnType = NodeFlags;

export type VariableDeclarationKindReturnType = SyntaxKind;

export type VariableDeclarationKindCodeReturnType = number;

export type VariableDeclarationModifiersReturnType = null | MaybePromiseList<Token_ReturnType>;

export interface VariableDeclarationModifiersArgs extends NodeModifiersArgs {}

export type VariableDeclarationNameReturnType = null | DeclarationNameReturnType;

export type VariableDeclarationNameTextReturnType = null | string;

export type VariableDeclarationParentReturnType = Node_ReturnType;

export type VariableDeclarationPosReturnType = number;

export type VariableDeclarationRawTextReturnType = string;

export interface VariableDeclarationRawTextArgs extends NodeRawTextArgs {}

export type VariableDeclarationTypeNameReturnType = null | DeclarationNameReturnType;

export type VariableDeclarationRootType = ts.VariableDeclaration;

export type VariableDeclaration_ReturnType = ts.VariableDeclaration

export type NodeRootType = ts.Node;

export type Node_ReturnType = ts.Node;

export type HasJSDocRootType = ts.HasJSDoc;

export type HasJSDoc_ReturnType = ts.HasJSDoc;

export type MaybeOptionalRootType = ConstructorDeclarationRootType | FunctionDeclarationRootType | GetAccessorDeclarationRootType | MethodDeclarationRootType | PropertyDeclarationRootType | PropertySignatureRootType | SetAccessorDeclarationRootType;

export type MaybeOptional_ReturnType = ConstructorDeclaration_ReturnType | FunctionDeclaration_ReturnType | GetAccessorDeclaration_ReturnType | MethodDeclaration_ReturnType | PropertyDeclaration_ReturnType | PropertySignature_ReturnType | SetAccessorDeclaration_ReturnType;

export type JSDocTagRootType = ts.JSDocTag;

export type JSDocTag_ReturnType = ts.JSDocTag;

export interface GraphQLNexusGenArgTypes {
  Query: {
    parseFile: QueryParseFileArgs;
  };
  SourceFile: {
    modifiers: SourceFileModifiersArgs;
    rawText: SourceFileRawTextArgs;
    statements: SourceFileStatementsArgs;
  };
  Node: {
    modifiers: NodeModifiersArgs;
    rawText: NodeRawTextArgs;
  };
  BindingPattern: {
    modifiers: BindingPatternModifiersArgs;
    rawText: BindingPatternRawTextArgs;
  };
  ComputedPropertyName: {
    modifiers: ComputedPropertyNameModifiersArgs;
    rawText: ComputedPropertyNameRawTextArgs;
  };
  Identifier: {
    modifiers: IdentifierModifiersArgs;
    rawText: IdentifierRawTextArgs;
  };
  NumericLiteral: {
    modifiers: NumericLiteralModifiersArgs;
    rawText: NumericLiteralRawTextArgs;
  };
  QualifiedName: {
    modifiers: QualifiedNameModifiersArgs;
    rawText: QualifiedNameRawTextArgs;
  };
  StringLiteralLike: {
    modifiers: StringLiteralLikeModifiersArgs;
    rawText: StringLiteralLikeRawTextArgs;
  };
  ArrayTypeNode: {
    modifiers: ArrayTypeNodeModifiersArgs;
    rawText: ArrayTypeNodeRawTextArgs;
  };
  CallSignatureDeclaration: {
    modifiers: CallSignatureDeclarationModifiersArgs;
    rawText: CallSignatureDeclarationRawTextArgs;
  };
  ClassDeclaration: {
    members: ClassDeclarationMembersArgs;
    modifiers: ClassDeclarationModifiersArgs;
    rawText: ClassDeclarationRawTextArgs;
  };
  ConditionalTypeNode: {
    modifiers: ConditionalTypeNodeModifiersArgs;
    rawText: ConditionalTypeNodeRawTextArgs;
  };
  ConstructorDeclaration: {
    modifiers: ConstructorDeclarationModifiersArgs;
    rawText: ConstructorDeclarationRawTextArgs;
  };
  ParameterDeclaration: {
    modifiers: ParameterDeclarationModifiersArgs;
    rawText: ParameterDeclarationRawTextArgs;
  };
  TypeParameterDeclaration: {
    modifiers: TypeParameterDeclarationModifiersArgs;
    rawText: TypeParameterDeclarationRawTextArgs;
  };
  ConstructorTypeNode: {
    modifiers: ConstructorTypeNodeModifiersArgs;
    rawText: ConstructorTypeNodeRawTextArgs;
  };
  ConstructSignatureDeclaration: {
    modifiers: ConstructSignatureDeclarationModifiersArgs;
    rawText: ConstructSignatureDeclarationRawTextArgs;
  };
  EnumDeclaration: {
    modifiers: EnumDeclarationModifiersArgs;
    rawText: EnumDeclarationRawTextArgs;
  };
  ExportAssignment: {
    modifiers: ExportAssignmentModifiersArgs;
    rawText: ExportAssignmentRawTextArgs;
  };
  ExportDeclaration: {
    modifiers: ExportDeclarationModifiersArgs;
    rawText: ExportDeclarationRawTextArgs;
  };
  FunctionDeclaration: {
    modifiers: FunctionDeclarationModifiersArgs;
    rawText: FunctionDeclarationRawTextArgs;
  };
  FunctionTypeNode: {
    modifiers: FunctionTypeNodeModifiersArgs;
    rawText: FunctionTypeNodeRawTextArgs;
  };
  GetAccessorDeclaration: {
    modifiers: GetAccessorDeclarationModifiersArgs;
    rawText: GetAccessorDeclarationRawTextArgs;
  };
  ImportDeclaration: {
    modifiers: ImportDeclarationModifiersArgs;
    rawText: ImportDeclarationRawTextArgs;
  };
  ImportEqualsDeclaration: {
    modifiers: ImportEqualsDeclarationModifiersArgs;
    rawText: ImportEqualsDeclarationRawTextArgs;
  };
  ImportTypeNode: {
    modifiers: ImportTypeNodeModifiersArgs;
    rawText: ImportTypeNodeRawTextArgs;
  };
  IndexedAccessTypeNode: {
    modifiers: IndexedAccessTypeNodeModifiersArgs;
    rawText: IndexedAccessTypeNodeRawTextArgs;
  };
  IndexSignatureDeclaration: {
    modifiers: IndexSignatureDeclarationModifiersArgs;
    rawText: IndexSignatureDeclarationRawTextArgs;
  };
  InferTypeNode: {
    modifiers: InferTypeNodeModifiersArgs;
    rawText: InferTypeNodeRawTextArgs;
  };
  InterfaceDeclaration: {
    modifiers: InterfaceDeclarationModifiersArgs;
    rawText: InterfaceDeclarationRawTextArgs;
  };
  IntersectionTypeNode: {
    modifiers: IntersectionTypeNodeModifiersArgs;
    rawText: IntersectionTypeNodeRawTextArgs;
  };
  JSDocNamespaceDeclaration: {
    modifiers: JSDocNamespaceDeclarationModifiersArgs;
    rawText: JSDocNamespaceDeclarationRawTextArgs;
  };
  KeywordTypeNode: {
    modifiers: KeywordTypeNodeModifiersArgs;
    rawText: KeywordTypeNodeRawTextArgs;
  };
  LiteralType: {
    modifiers: LiteralTypeModifiersArgs;
    rawText: LiteralTypeRawTextArgs;
  };
  MappedTypeNode: {
    modifiers: MappedTypeNodeModifiersArgs;
    rawText: MappedTypeNodeRawTextArgs;
  };
  MethodDeclaration: {
    modifiers: MethodDeclarationModifiersArgs;
    rawText: MethodDeclarationRawTextArgs;
  };
  MissingDeclaration: {
    modifiers: MissingDeclarationModifiersArgs;
    rawText: MissingDeclarationRawTextArgs;
  };
  ModuleDeclaration: {
    modifiers: ModuleDeclarationModifiersArgs;
    rawText: ModuleDeclarationRawTextArgs;
  };
  NamespaceDeclaration: {
    modifiers: NamespaceDeclarationModifiersArgs;
    rawText: NamespaceDeclarationRawTextArgs;
  };
  NamespaceExportDeclaration: {
    modifiers: NamespaceExportDeclarationModifiersArgs;
    rawText: NamespaceExportDeclarationRawTextArgs;
  };
  OptionalTypeNode: {
    modifiers: OptionalTypeNodeModifiersArgs;
    rawText: OptionalTypeNodeRawTextArgs;
  };
  ParenthesizedType: {
    modifiers: ParenthesizedTypeModifiersArgs;
    rawText: ParenthesizedTypeRawTextArgs;
  };
  PropertyDeclaration: {
    modifiers: PropertyDeclarationModifiersArgs;
    rawText: PropertyDeclarationRawTextArgs;
  };
  PropertyLikeDeclaration: {
    modifiers: PropertyLikeDeclarationModifiersArgs;
    rawText: PropertyLikeDeclarationRawTextArgs;
  };
  PropertySignature: {
    modifiers: PropertySignatureModifiersArgs;
    rawText: PropertySignatureRawTextArgs;
  };
  RestTypeNode: {
    modifiers: RestTypeNodeModifiersArgs;
    rawText: RestTypeNodeRawTextArgs;
  };
  SetAccessorDeclaration: {
    modifiers: SetAccessorDeclarationModifiersArgs;
    rawText: SetAccessorDeclarationRawTextArgs;
  };
  StringLiteral: {
    modifiers: StringLiteralModifiersArgs;
    rawText: StringLiteralRawTextArgs;
  };
  ThisTypeNode: {
    modifiers: ThisTypeNodeModifiersArgs;
    rawText: ThisTypeNodeRawTextArgs;
  };
  TupleTypeNode: {
    modifiers: TupleTypeNodeModifiersArgs;
    rawText: TupleTypeNodeRawTextArgs;
  };
  TypeAliasDeclaration: {
    modifiers: TypeAliasDeclarationModifiersArgs;
    rawText: TypeAliasDeclarationRawTextArgs;
  };
  TypeLiteral: {
    modifiers: TypeLiteralModifiersArgs;
    rawText: TypeLiteralRawTextArgs;
  };
  TypeReference: {
    modifiers: TypeReferenceModifiersArgs;
    rawText: TypeReferenceRawTextArgs;
  };
  UnionType: {
    modifiers: UnionTypeModifiersArgs;
    rawText: UnionTypeRawTextArgs;
  };
  UNKNOWN_NODE: {
    modifiers: UNKNOWN_NODEModifiersArgs;
    rawText: UNKNOWN_NODERawTextArgs;
  };
  VariableDeclaration: {
    modifiers: VariableDeclarationModifiersArgs;
    rawText: VariableDeclarationRawTextArgs;
  };
}

export interface GraphQLNexusGenRootTypes {
  Node: NodeRootType;
  HasJSDoc: HasJSDocRootType;
  JSDocTag: JSDocTagRootType;
  MaybeOptional: MaybeOptionalRootType;
  Query: {};
  SourceFile: SourceFileRootType;
  Token: TokenRootType;
  BindingPattern: BindingPatternRootType;
  ComputedPropertyName: ComputedPropertyNameRootType;
  Identifier: IdentifierRootType;
  NumericLiteral: NumericLiteralRootType;
  QualifiedName: QualifiedNameRootType;
  StringLiteralLike: StringLiteralLikeRootType;
  UnnamedNode: UnnamedNodeRootType;
  ArrayTypeNode: ArrayTypeNodeRootType;
  CallSignatureDeclaration: CallSignatureDeclarationRootType;
  ClassDeclaration: ClassDeclarationRootType;
  JSDoc: JSDocRootType;
  ConditionalTypeNode: ConditionalTypeNodeRootType;
  ConstructorDeclaration: ConstructorDeclarationRootType;
  ParameterDeclaration: ParameterDeclarationRootType;
  TypeParameterDeclaration: TypeParameterDeclarationRootType;
  ConstructorTypeNode: ConstructorTypeNodeRootType;
  ConstructSignatureDeclaration: ConstructSignatureDeclarationRootType;
  EnumDeclaration: EnumDeclarationRootType;
  ExportAssignment: ExportAssignmentRootType;
  ExportDeclaration: ExportDeclarationRootType;
  FunctionDeclaration: FunctionDeclarationRootType;
  FunctionTypeNode: FunctionTypeNodeRootType;
  GetAccessorDeclaration: GetAccessorDeclarationRootType;
  ImportDeclaration: ImportDeclarationRootType;
  ImportEqualsDeclaration: ImportEqualsDeclarationRootType;
  ImportTypeNode: ImportTypeNodeRootType;
  IndexedAccessTypeNode: IndexedAccessTypeNodeRootType;
  IndexSignatureDeclaration: IndexSignatureDeclarationRootType;
  InferTypeNode: InferTypeNodeRootType;
  InterfaceDeclaration: InterfaceDeclarationRootType;
  IntersectionTypeNode: IntersectionTypeNodeRootType;
  JSDocAugmentsTag: JSDocAugmentsTagRootType;
  JSDocClassTag: JSDocClassTagRootType;
  JSDocEnumTag: JSDocEnumTagRootType;
  JSDocNamespaceDeclaration: JSDocNamespaceDeclarationRootType;
  JSDocReturnTag: JSDocReturnTagRootType;
  JSDocTemplateTag: JSDocTemplateTagRootType;
  JSDocThisTag: JSDocThisTagRootType;
  JSDocTypeTag: JSDocTypeTagRootType;
  JSDocUnknownTag: JSDocUnknownTagRootType;
  KeywordTypeNode: KeywordTypeNodeRootType;
  LiteralType: LiteralTypeRootType;
  MappedTypeNode: MappedTypeNodeRootType;
  MethodDeclaration: MethodDeclarationRootType;
  MissingDeclaration: MissingDeclarationRootType;
  ModuleDeclaration: ModuleDeclarationRootType;
  NamespaceDeclaration: NamespaceDeclarationRootType;
  NamespaceExportDeclaration: NamespaceExportDeclarationRootType;
  OptionalTypeNode: OptionalTypeNodeRootType;
  ParenthesizedType: ParenthesizedTypeRootType;
  PropertyDeclaration: PropertyDeclarationRootType;
  PropertyLikeDeclaration: PropertyLikeDeclarationRootType;
  PropertySignature: PropertySignatureRootType;
  RestTypeNode: RestTypeNodeRootType;
  SetAccessorDeclaration: SetAccessorDeclarationRootType;
  StringLiteral: StringLiteralRootType;
  ThisTypeNode: ThisTypeNodeRootType;
  TupleTypeNode: TupleTypeNodeRootType;
  TypeAliasDeclaration: TypeAliasDeclarationRootType;
  TypeLiteral: TypeLiteralRootType;
  TypeReference: TypeReferenceRootType;
  UnionType: UnionTypeRootType;
  UNKNOWN_NODE: UNKNOWN_NODERootType;
  VariableDeclaration: VariableDeclarationRootType;
}

export interface GraphQLNexusGenReturnTypes {
  Query: {
    parseFile: QueryParseFileReturnType;
  };
  SourceFile: {
    end: SourceFileEndReturnType;
    flags: SourceFileFlagsReturnType;
    kind: SourceFileKindReturnType;
    kindCode: SourceFileKindCodeReturnType;
    modifiers: SourceFileModifiersReturnType;
    name: SourceFileNameReturnType;
    nameText: SourceFileNameTextReturnType;
    parent: SourceFileParentReturnType;
    pos: SourceFilePosReturnType;
    rawText: SourceFileRawTextReturnType;
    statements: SourceFileStatementsReturnType;
    typeName: SourceFileTypeNameReturnType;
  };
  Node: {
    end: NodeEndReturnType;
    flags: NodeFlagsReturnType;
    kind: NodeKindReturnType;
    kindCode: NodeKindCodeReturnType;
    modifiers: NodeModifiersReturnType;
    name: NodeNameReturnType;
    nameText: NodeNameTextReturnType;
    parent: NodeParentReturnType;
    pos: NodePosReturnType;
    rawText: NodeRawTextReturnType;
    typeName: NodeTypeNameReturnType;
  };
  Token: {
    kind: TokenKindReturnType;
  };
  BindingPattern: {
    end: BindingPatternEndReturnType;
    flags: BindingPatternFlagsReturnType;
    kind: BindingPatternKindReturnType;
    kindCode: BindingPatternKindCodeReturnType;
    modifiers: BindingPatternModifiersReturnType;
    name: BindingPatternNameReturnType;
    nameText: BindingPatternNameTextReturnType;
    parent: BindingPatternParentReturnType;
    pos: BindingPatternPosReturnType;
    rawText: BindingPatternRawTextReturnType;
    typeName: BindingPatternTypeNameReturnType;
  };
  ComputedPropertyName: {
    end: ComputedPropertyNameEndReturnType;
    flags: ComputedPropertyNameFlagsReturnType;
    kind: ComputedPropertyNameKindReturnType;
    kindCode: ComputedPropertyNameKindCodeReturnType;
    modifiers: ComputedPropertyNameModifiersReturnType;
    name: ComputedPropertyNameNameReturnType;
    nameText: ComputedPropertyNameNameTextReturnType;
    parent: ComputedPropertyNameParentReturnType;
    pos: ComputedPropertyNamePosReturnType;
    rawText: ComputedPropertyNameRawTextReturnType;
    typeName: ComputedPropertyNameTypeNameReturnType;
  };
  Identifier: {
    end: IdentifierEndReturnType;
    flags: IdentifierFlagsReturnType;
    kind: IdentifierKindReturnType;
    kindCode: IdentifierKindCodeReturnType;
    modifiers: IdentifierModifiersReturnType;
    name: IdentifierNameReturnType;
    nameText: IdentifierNameTextReturnType;
    parent: IdentifierParentReturnType;
    pos: IdentifierPosReturnType;
    rawText: IdentifierRawTextReturnType;
    text: IdentifierTextReturnType;
    typeName: IdentifierTypeNameReturnType;
  };
  NumericLiteral: {
    end: NumericLiteralEndReturnType;
    flags: NumericLiteralFlagsReturnType;
    kind: NumericLiteralKindReturnType;
    kindCode: NumericLiteralKindCodeReturnType;
    modifiers: NumericLiteralModifiersReturnType;
    name: NumericLiteralNameReturnType;
    nameText: NumericLiteralNameTextReturnType;
    parent: NumericLiteralParentReturnType;
    pos: NumericLiteralPosReturnType;
    rawText: NumericLiteralRawTextReturnType;
    typeName: NumericLiteralTypeNameReturnType;
  };
  QualifiedName: {
    end: QualifiedNameEndReturnType;
    flags: QualifiedNameFlagsReturnType;
    kind: QualifiedNameKindReturnType;
    kindCode: QualifiedNameKindCodeReturnType;
    modifiers: QualifiedNameModifiersReturnType;
    name: QualifiedNameNameReturnType;
    nameText: QualifiedNameNameTextReturnType;
    parent: QualifiedNameParentReturnType;
    pos: QualifiedNamePosReturnType;
    rawText: QualifiedNameRawTextReturnType;
    typeName: QualifiedNameTypeNameReturnType;
  };
  StringLiteralLike: {
    end: StringLiteralLikeEndReturnType;
    flags: StringLiteralLikeFlagsReturnType;
    kind: StringLiteralLikeKindReturnType;
    kindCode: StringLiteralLikeKindCodeReturnType;
    modifiers: StringLiteralLikeModifiersReturnType;
    name: StringLiteralLikeNameReturnType;
    nameText: StringLiteralLikeNameTextReturnType;
    parent: StringLiteralLikeParentReturnType;
    pos: StringLiteralLikePosReturnType;
    rawText: StringLiteralLikeRawTextReturnType;
    typeName: StringLiteralLikeTypeNameReturnType;
  };
  UnnamedNode: {
    text: UnnamedNodeTextReturnType;
  };
  ArrayTypeNode: {
    elementType: ArrayTypeNodeElementTypeReturnType;
    end: ArrayTypeNodeEndReturnType;
    flags: ArrayTypeNodeFlagsReturnType;
    kind: ArrayTypeNodeKindReturnType;
    kindCode: ArrayTypeNodeKindCodeReturnType;
    modifiers: ArrayTypeNodeModifiersReturnType;
    name: ArrayTypeNodeNameReturnType;
    nameText: ArrayTypeNodeNameTextReturnType;
    parent: ArrayTypeNodeParentReturnType;
    pos: ArrayTypeNodePosReturnType;
    rawText: ArrayTypeNodeRawTextReturnType;
    typeName: ArrayTypeNodeTypeNameReturnType;
  };
  CallSignatureDeclaration: {
    end: CallSignatureDeclarationEndReturnType;
    flags: CallSignatureDeclarationFlagsReturnType;
    kind: CallSignatureDeclarationKindReturnType;
    kindCode: CallSignatureDeclarationKindCodeReturnType;
    modifiers: CallSignatureDeclarationModifiersReturnType;
    name: CallSignatureDeclarationNameReturnType;
    nameText: CallSignatureDeclarationNameTextReturnType;
    parent: CallSignatureDeclarationParentReturnType;
    pos: CallSignatureDeclarationPosReturnType;
    rawText: CallSignatureDeclarationRawTextReturnType;
    typeName: CallSignatureDeclarationTypeNameReturnType;
  };
  ClassDeclaration: {
    end: ClassDeclarationEndReturnType;
    flags: ClassDeclarationFlagsReturnType;
    jsDoc: ClassDeclarationJsDocReturnType;
    kind: ClassDeclarationKindReturnType;
    kindCode: ClassDeclarationKindCodeReturnType;
    members: ClassDeclarationMembersReturnType;
    modifiers: ClassDeclarationModifiersReturnType;
    name: ClassDeclarationNameReturnType;
    nameText: ClassDeclarationNameTextReturnType;
    parent: ClassDeclarationParentReturnType;
    pos: ClassDeclarationPosReturnType;
    rawText: ClassDeclarationRawTextReturnType;
    typeName: ClassDeclarationTypeNameReturnType;
  };
  HasJSDoc: {
    jsDoc: HasJSDocJsDocReturnType;
  };
  JSDoc: {
    comment: JSDocCommentReturnType;
    tags: JSDocTagsReturnType;
  };
  JSDocTag: {
    comment: JSDocTagCommentReturnType;
    tagName: JSDocTagTagNameReturnType;
  };
  ConditionalTypeNode: {
    checkType: ConditionalTypeNodeCheckTypeReturnType;
    end: ConditionalTypeNodeEndReturnType;
    extendsType: ConditionalTypeNodeExtendsTypeReturnType;
    falseType: ConditionalTypeNodeFalseTypeReturnType;
    flags: ConditionalTypeNodeFlagsReturnType;
    kind: ConditionalTypeNodeKindReturnType;
    kindCode: ConditionalTypeNodeKindCodeReturnType;
    modifiers: ConditionalTypeNodeModifiersReturnType;
    name: ConditionalTypeNodeNameReturnType;
    nameText: ConditionalTypeNodeNameTextReturnType;
    parent: ConditionalTypeNodeParentReturnType;
    pos: ConditionalTypeNodePosReturnType;
    rawText: ConditionalTypeNodeRawTextReturnType;
    trueType: ConditionalTypeNodeTrueTypeReturnType;
    typeName: ConditionalTypeNodeTypeNameReturnType;
  };
  ConstructorDeclaration: {
    asteriskToken: ConstructorDeclarationAsteriskTokenReturnType;
    end: ConstructorDeclarationEndReturnType;
    exclamationToken: ConstructorDeclarationExclamationTokenReturnType;
    flags: ConstructorDeclarationFlagsReturnType;
    jsDoc: ConstructorDeclarationJsDocReturnType;
    kind: ConstructorDeclarationKindReturnType;
    kindCode: ConstructorDeclarationKindCodeReturnType;
    modifiers: ConstructorDeclarationModifiersReturnType;
    name: ConstructorDeclarationNameReturnType;
    nameText: ConstructorDeclarationNameTextReturnType;
    parameters: ConstructorDeclarationParametersReturnType;
    parent: ConstructorDeclarationParentReturnType;
    pos: ConstructorDeclarationPosReturnType;
    questionToken: ConstructorDeclarationQuestionTokenReturnType;
    rawText: ConstructorDeclarationRawTextReturnType;
    type: ConstructorDeclarationTypeReturnType;
    typeName: ConstructorDeclarationTypeNameReturnType;
    typeParameters: ConstructorDeclarationTypeParametersReturnType;
  };
  MaybeOptional: {
    questionToken: MaybeOptionalQuestionTokenReturnType;
  };
  ParameterDeclaration: {
    end: ParameterDeclarationEndReturnType;
    flags: ParameterDeclarationFlagsReturnType;
    jsDoc: ParameterDeclarationJsDocReturnType;
    kind: ParameterDeclarationKindReturnType;
    kindCode: ParameterDeclarationKindCodeReturnType;
    modifiers: ParameterDeclarationModifiersReturnType;
    name: ParameterDeclarationNameReturnType;
    nameText: ParameterDeclarationNameTextReturnType;
    parent: ParameterDeclarationParentReturnType;
    pos: ParameterDeclarationPosReturnType;
    rawText: ParameterDeclarationRawTextReturnType;
    type: ParameterDeclarationTypeReturnType;
    typeName: ParameterDeclarationTypeNameReturnType;
  };
  TypeParameterDeclaration: {
    constraint: TypeParameterDeclarationConstraintReturnType;
    default: TypeParameterDeclarationDefaultReturnType;
    end: TypeParameterDeclarationEndReturnType;
    expression: TypeParameterDeclarationExpressionReturnType;
    flags: TypeParameterDeclarationFlagsReturnType;
    kind: TypeParameterDeclarationKindReturnType;
    kindCode: TypeParameterDeclarationKindCodeReturnType;
    modifiers: TypeParameterDeclarationModifiersReturnType;
    name: TypeParameterDeclarationNameReturnType;
    nameText: TypeParameterDeclarationNameTextReturnType;
    parent: TypeParameterDeclarationParentReturnType;
    pos: TypeParameterDeclarationPosReturnType;
    rawText: TypeParameterDeclarationRawTextReturnType;
    typeName: TypeParameterDeclarationTypeNameReturnType;
  };
  ConstructorTypeNode: {
    end: ConstructorTypeNodeEndReturnType;
    flags: ConstructorTypeNodeFlagsReturnType;
    kind: ConstructorTypeNodeKindReturnType;
    kindCode: ConstructorTypeNodeKindCodeReturnType;
    modifiers: ConstructorTypeNodeModifiersReturnType;
    name: ConstructorTypeNodeNameReturnType;
    nameText: ConstructorTypeNodeNameTextReturnType;
    parent: ConstructorTypeNodeParentReturnType;
    pos: ConstructorTypeNodePosReturnType;
    rawText: ConstructorTypeNodeRawTextReturnType;
    type: ConstructorTypeNodeTypeReturnType;
    typeName: ConstructorTypeNodeTypeNameReturnType;
  };
  ConstructSignatureDeclaration: {
    end: ConstructSignatureDeclarationEndReturnType;
    flags: ConstructSignatureDeclarationFlagsReturnType;
    kind: ConstructSignatureDeclarationKindReturnType;
    kindCode: ConstructSignatureDeclarationKindCodeReturnType;
    modifiers: ConstructSignatureDeclarationModifiersReturnType;
    name: ConstructSignatureDeclarationNameReturnType;
    nameText: ConstructSignatureDeclarationNameTextReturnType;
    parent: ConstructSignatureDeclarationParentReturnType;
    pos: ConstructSignatureDeclarationPosReturnType;
    rawText: ConstructSignatureDeclarationRawTextReturnType;
    typeName: ConstructSignatureDeclarationTypeNameReturnType;
  };
  EnumDeclaration: {
    end: EnumDeclarationEndReturnType;
    flags: EnumDeclarationFlagsReturnType;
    jsDoc: EnumDeclarationJsDocReturnType;
    kind: EnumDeclarationKindReturnType;
    kindCode: EnumDeclarationKindCodeReturnType;
    members: EnumDeclarationMembersReturnType;
    modifiers: EnumDeclarationModifiersReturnType;
    name: EnumDeclarationNameReturnType;
    nameText: EnumDeclarationNameTextReturnType;
    parent: EnumDeclarationParentReturnType;
    pos: EnumDeclarationPosReturnType;
    rawText: EnumDeclarationRawTextReturnType;
    typeName: EnumDeclarationTypeNameReturnType;
  };
  ExportAssignment: {
    end: ExportAssignmentEndReturnType;
    flags: ExportAssignmentFlagsReturnType;
    kind: ExportAssignmentKindReturnType;
    kindCode: ExportAssignmentKindCodeReturnType;
    modifiers: ExportAssignmentModifiersReturnType;
    name: ExportAssignmentNameReturnType;
    nameText: ExportAssignmentNameTextReturnType;
    parent: ExportAssignmentParentReturnType;
    pos: ExportAssignmentPosReturnType;
    rawText: ExportAssignmentRawTextReturnType;
    typeName: ExportAssignmentTypeNameReturnType;
  };
  ExportDeclaration: {
    end: ExportDeclarationEndReturnType;
    flags: ExportDeclarationFlagsReturnType;
    kind: ExportDeclarationKindReturnType;
    kindCode: ExportDeclarationKindCodeReturnType;
    modifiers: ExportDeclarationModifiersReturnType;
    name: ExportDeclarationNameReturnType;
    nameText: ExportDeclarationNameTextReturnType;
    parent: ExportDeclarationParentReturnType;
    pos: ExportDeclarationPosReturnType;
    rawText: ExportDeclarationRawTextReturnType;
    typeName: ExportDeclarationTypeNameReturnType;
  };
  FunctionDeclaration: {
    asteriskToken: FunctionDeclarationAsteriskTokenReturnType;
    end: FunctionDeclarationEndReturnType;
    exclamationToken: FunctionDeclarationExclamationTokenReturnType;
    flags: FunctionDeclarationFlagsReturnType;
    jsDoc: FunctionDeclarationJsDocReturnType;
    kind: FunctionDeclarationKindReturnType;
    kindCode: FunctionDeclarationKindCodeReturnType;
    modifiers: FunctionDeclarationModifiersReturnType;
    name: FunctionDeclarationNameReturnType;
    nameText: FunctionDeclarationNameTextReturnType;
    parameters: FunctionDeclarationParametersReturnType;
    parent: FunctionDeclarationParentReturnType;
    pos: FunctionDeclarationPosReturnType;
    questionToken: FunctionDeclarationQuestionTokenReturnType;
    rawText: FunctionDeclarationRawTextReturnType;
    type: FunctionDeclarationTypeReturnType;
    typeName: FunctionDeclarationTypeNameReturnType;
    typeParameters: FunctionDeclarationTypeParametersReturnType;
  };
  FunctionTypeNode: {
    end: FunctionTypeNodeEndReturnType;
    flags: FunctionTypeNodeFlagsReturnType;
    kind: FunctionTypeNodeKindReturnType;
    kindCode: FunctionTypeNodeKindCodeReturnType;
    modifiers: FunctionTypeNodeModifiersReturnType;
    name: FunctionTypeNodeNameReturnType;
    nameText: FunctionTypeNodeNameTextReturnType;
    parent: FunctionTypeNodeParentReturnType;
    pos: FunctionTypeNodePosReturnType;
    rawText: FunctionTypeNodeRawTextReturnType;
    type: FunctionTypeNodeTypeReturnType;
    typeName: FunctionTypeNodeTypeNameReturnType;
  };
  GetAccessorDeclaration: {
    asteriskToken: GetAccessorDeclarationAsteriskTokenReturnType;
    end: GetAccessorDeclarationEndReturnType;
    exclamationToken: GetAccessorDeclarationExclamationTokenReturnType;
    flags: GetAccessorDeclarationFlagsReturnType;
    jsDoc: GetAccessorDeclarationJsDocReturnType;
    kind: GetAccessorDeclarationKindReturnType;
    kindCode: GetAccessorDeclarationKindCodeReturnType;
    modifiers: GetAccessorDeclarationModifiersReturnType;
    name: GetAccessorDeclarationNameReturnType;
    nameText: GetAccessorDeclarationNameTextReturnType;
    parameters: GetAccessorDeclarationParametersReturnType;
    parent: GetAccessorDeclarationParentReturnType;
    pos: GetAccessorDeclarationPosReturnType;
    questionToken: GetAccessorDeclarationQuestionTokenReturnType;
    rawText: GetAccessorDeclarationRawTextReturnType;
    type: GetAccessorDeclarationTypeReturnType;
    typeName: GetAccessorDeclarationTypeNameReturnType;
    typeParameters: GetAccessorDeclarationTypeParametersReturnType;
  };
  ImportDeclaration: {
    end: ImportDeclarationEndReturnType;
    flags: ImportDeclarationFlagsReturnType;
    kind: ImportDeclarationKindReturnType;
    kindCode: ImportDeclarationKindCodeReturnType;
    modifiers: ImportDeclarationModifiersReturnType;
    name: ImportDeclarationNameReturnType;
    nameText: ImportDeclarationNameTextReturnType;
    parent: ImportDeclarationParentReturnType;
    pos: ImportDeclarationPosReturnType;
    rawText: ImportDeclarationRawTextReturnType;
    typeName: ImportDeclarationTypeNameReturnType;
  };
  ImportEqualsDeclaration: {
    end: ImportEqualsDeclarationEndReturnType;
    flags: ImportEqualsDeclarationFlagsReturnType;
    kind: ImportEqualsDeclarationKindReturnType;
    kindCode: ImportEqualsDeclarationKindCodeReturnType;
    modifiers: ImportEqualsDeclarationModifiersReturnType;
    name: ImportEqualsDeclarationNameReturnType;
    nameText: ImportEqualsDeclarationNameTextReturnType;
    parent: ImportEqualsDeclarationParentReturnType;
    pos: ImportEqualsDeclarationPosReturnType;
    rawText: ImportEqualsDeclarationRawTextReturnType;
    typeName: ImportEqualsDeclarationTypeNameReturnType;
  };
  ImportTypeNode: {
    end: ImportTypeNodeEndReturnType;
    flags: ImportTypeNodeFlagsReturnType;
    kind: ImportTypeNodeKindReturnType;
    kindCode: ImportTypeNodeKindCodeReturnType;
    modifiers: ImportTypeNodeModifiersReturnType;
    name: ImportTypeNodeNameReturnType;
    nameText: ImportTypeNodeNameTextReturnType;
    parent: ImportTypeNodeParentReturnType;
    pos: ImportTypeNodePosReturnType;
    rawText: ImportTypeNodeRawTextReturnType;
    typeName: ImportTypeNodeTypeNameReturnType;
  };
  IndexedAccessTypeNode: {
    end: IndexedAccessTypeNodeEndReturnType;
    flags: IndexedAccessTypeNodeFlagsReturnType;
    kind: IndexedAccessTypeNodeKindReturnType;
    kindCode: IndexedAccessTypeNodeKindCodeReturnType;
    modifiers: IndexedAccessTypeNodeModifiersReturnType;
    name: IndexedAccessTypeNodeNameReturnType;
    nameText: IndexedAccessTypeNodeNameTextReturnType;
    parent: IndexedAccessTypeNodeParentReturnType;
    pos: IndexedAccessTypeNodePosReturnType;
    rawText: IndexedAccessTypeNodeRawTextReturnType;
    typeName: IndexedAccessTypeNodeTypeNameReturnType;
  };
  IndexSignatureDeclaration: {
    end: IndexSignatureDeclarationEndReturnType;
    flags: IndexSignatureDeclarationFlagsReturnType;
    jsDoc: IndexSignatureDeclarationJsDocReturnType;
    kind: IndexSignatureDeclarationKindReturnType;
    kindCode: IndexSignatureDeclarationKindCodeReturnType;
    modifiers: IndexSignatureDeclarationModifiersReturnType;
    name: IndexSignatureDeclarationNameReturnType;
    nameText: IndexSignatureDeclarationNameTextReturnType;
    parent: IndexSignatureDeclarationParentReturnType;
    pos: IndexSignatureDeclarationPosReturnType;
    rawText: IndexSignatureDeclarationRawTextReturnType;
    typeName: IndexSignatureDeclarationTypeNameReturnType;
  };
  InferTypeNode: {
    end: InferTypeNodeEndReturnType;
    flags: InferTypeNodeFlagsReturnType;
    kind: InferTypeNodeKindReturnType;
    kindCode: InferTypeNodeKindCodeReturnType;
    modifiers: InferTypeNodeModifiersReturnType;
    name: InferTypeNodeNameReturnType;
    nameText: InferTypeNodeNameTextReturnType;
    parent: InferTypeNodeParentReturnType;
    pos: InferTypeNodePosReturnType;
    rawText: InferTypeNodeRawTextReturnType;
    typeName: InferTypeNodeTypeNameReturnType;
    typeParameter: InferTypeNodeTypeParameterReturnType;
  };
  InterfaceDeclaration: {
    end: InterfaceDeclarationEndReturnType;
    flags: InterfaceDeclarationFlagsReturnType;
    jsDoc: InterfaceDeclarationJsDocReturnType;
    kind: InterfaceDeclarationKindReturnType;
    kindCode: InterfaceDeclarationKindCodeReturnType;
    modifiers: InterfaceDeclarationModifiersReturnType;
    name: InterfaceDeclarationNameReturnType;
    nameText: InterfaceDeclarationNameTextReturnType;
    parent: InterfaceDeclarationParentReturnType;
    pos: InterfaceDeclarationPosReturnType;
    rawText: InterfaceDeclarationRawTextReturnType;
    typeName: InterfaceDeclarationTypeNameReturnType;
  };
  IntersectionTypeNode: {
    end: IntersectionTypeNodeEndReturnType;
    flags: IntersectionTypeNodeFlagsReturnType;
    kind: IntersectionTypeNodeKindReturnType;
    kindCode: IntersectionTypeNodeKindCodeReturnType;
    modifiers: IntersectionTypeNodeModifiersReturnType;
    name: IntersectionTypeNodeNameReturnType;
    nameText: IntersectionTypeNodeNameTextReturnType;
    parent: IntersectionTypeNodeParentReturnType;
    pos: IntersectionTypeNodePosReturnType;
    rawText: IntersectionTypeNodeRawTextReturnType;
    typeName: IntersectionTypeNodeTypeNameReturnType;
    types: IntersectionTypeNodeTypesReturnType;
  };
  JSDocAugmentsTag: {
    comment: JSDocAugmentsTagCommentReturnType;
    tagName: JSDocAugmentsTagTagNameReturnType;
  };
  JSDocClassTag: {
    comment: JSDocClassTagCommentReturnType;
    tagName: JSDocClassTagTagNameReturnType;
  };
  JSDocEnumTag: {
    comment: JSDocEnumTagCommentReturnType;
    tagName: JSDocEnumTagTagNameReturnType;
  };
  JSDocNamespaceDeclaration: {
    end: JSDocNamespaceDeclarationEndReturnType;
    flags: JSDocNamespaceDeclarationFlagsReturnType;
    kind: JSDocNamespaceDeclarationKindReturnType;
    kindCode: JSDocNamespaceDeclarationKindCodeReturnType;
    modifiers: JSDocNamespaceDeclarationModifiersReturnType;
    name: JSDocNamespaceDeclarationNameReturnType;
    nameText: JSDocNamespaceDeclarationNameTextReturnType;
    parent: JSDocNamespaceDeclarationParentReturnType;
    pos: JSDocNamespaceDeclarationPosReturnType;
    rawText: JSDocNamespaceDeclarationRawTextReturnType;
    typeName: JSDocNamespaceDeclarationTypeNameReturnType;
  };
  JSDocReturnTag: {
    comment: JSDocReturnTagCommentReturnType;
    tagName: JSDocReturnTagTagNameReturnType;
  };
  JSDocTemplateTag: {
    comment: JSDocTemplateTagCommentReturnType;
    tagName: JSDocTemplateTagTagNameReturnType;
  };
  JSDocThisTag: {
    comment: JSDocThisTagCommentReturnType;
    tagName: JSDocThisTagTagNameReturnType;
  };
  JSDocTypeTag: {
    comment: JSDocTypeTagCommentReturnType;
    tagName: JSDocTypeTagTagNameReturnType;
  };
  JSDocUnknownTag: {
    comment: JSDocUnknownTagCommentReturnType;
    tagName: JSDocUnknownTagTagNameReturnType;
  };
  KeywordTypeNode: {
    end: KeywordTypeNodeEndReturnType;
    flags: KeywordTypeNodeFlagsReturnType;
    kind: KeywordTypeNodeKindReturnType;
    kindCode: KeywordTypeNodeKindCodeReturnType;
    modifiers: KeywordTypeNodeModifiersReturnType;
    name: KeywordTypeNodeNameReturnType;
    nameText: KeywordTypeNodeNameTextReturnType;
    parent: KeywordTypeNodeParentReturnType;
    pos: KeywordTypeNodePosReturnType;
    rawText: KeywordTypeNodeRawTextReturnType;
    typeName: KeywordTypeNodeTypeNameReturnType;
  };
  LiteralType: {
    end: LiteralTypeEndReturnType;
    flags: LiteralTypeFlagsReturnType;
    kind: LiteralTypeKindReturnType;
    kindCode: LiteralTypeKindCodeReturnType;
    modifiers: LiteralTypeModifiersReturnType;
    name: LiteralTypeNameReturnType;
    nameText: LiteralTypeNameTextReturnType;
    parent: LiteralTypeParentReturnType;
    pos: LiteralTypePosReturnType;
    rawText: LiteralTypeRawTextReturnType;
    typeName: LiteralTypeTypeNameReturnType;
  };
  MappedTypeNode: {
    end: MappedTypeNodeEndReturnType;
    flags: MappedTypeNodeFlagsReturnType;
    kind: MappedTypeNodeKindReturnType;
    kindCode: MappedTypeNodeKindCodeReturnType;
    modifiers: MappedTypeNodeModifiersReturnType;
    name: MappedTypeNodeNameReturnType;
    nameText: MappedTypeNodeNameTextReturnType;
    parent: MappedTypeNodeParentReturnType;
    pos: MappedTypeNodePosReturnType;
    rawText: MappedTypeNodeRawTextReturnType;
    typeName: MappedTypeNodeTypeNameReturnType;
  };
  MethodDeclaration: {
    asteriskToken: MethodDeclarationAsteriskTokenReturnType;
    end: MethodDeclarationEndReturnType;
    exclamationToken: MethodDeclarationExclamationTokenReturnType;
    flags: MethodDeclarationFlagsReturnType;
    jsDoc: MethodDeclarationJsDocReturnType;
    kind: MethodDeclarationKindReturnType;
    kindCode: MethodDeclarationKindCodeReturnType;
    modifiers: MethodDeclarationModifiersReturnType;
    name: MethodDeclarationNameReturnType;
    nameText: MethodDeclarationNameTextReturnType;
    parameters: MethodDeclarationParametersReturnType;
    parent: MethodDeclarationParentReturnType;
    pos: MethodDeclarationPosReturnType;
    questionToken: MethodDeclarationQuestionTokenReturnType;
    rawText: MethodDeclarationRawTextReturnType;
    type: MethodDeclarationTypeReturnType;
    typeName: MethodDeclarationTypeNameReturnType;
    typeParameters: MethodDeclarationTypeParametersReturnType;
  };
  MissingDeclaration: {
    end: MissingDeclarationEndReturnType;
    flags: MissingDeclarationFlagsReturnType;
    kind: MissingDeclarationKindReturnType;
    kindCode: MissingDeclarationKindCodeReturnType;
    modifiers: MissingDeclarationModifiersReturnType;
    name: MissingDeclarationNameReturnType;
    nameText: MissingDeclarationNameTextReturnType;
    parent: MissingDeclarationParentReturnType;
    pos: MissingDeclarationPosReturnType;
    rawText: MissingDeclarationRawTextReturnType;
    typeName: MissingDeclarationTypeNameReturnType;
  };
  ModuleDeclaration: {
    end: ModuleDeclarationEndReturnType;
    flags: ModuleDeclarationFlagsReturnType;
    jsDoc: ModuleDeclarationJsDocReturnType;
    kind: ModuleDeclarationKindReturnType;
    kindCode: ModuleDeclarationKindCodeReturnType;
    modifiers: ModuleDeclarationModifiersReturnType;
    name: ModuleDeclarationNameReturnType;
    nameText: ModuleDeclarationNameTextReturnType;
    parent: ModuleDeclarationParentReturnType;
    pos: ModuleDeclarationPosReturnType;
    rawText: ModuleDeclarationRawTextReturnType;
    typeName: ModuleDeclarationTypeNameReturnType;
  };
  NamespaceDeclaration: {
    end: NamespaceDeclarationEndReturnType;
    flags: NamespaceDeclarationFlagsReturnType;
    jsDoc: NamespaceDeclarationJsDocReturnType;
    kind: NamespaceDeclarationKindReturnType;
    kindCode: NamespaceDeclarationKindCodeReturnType;
    modifiers: NamespaceDeclarationModifiersReturnType;
    name: NamespaceDeclarationNameReturnType;
    nameText: NamespaceDeclarationNameTextReturnType;
    parent: NamespaceDeclarationParentReturnType;
    pos: NamespaceDeclarationPosReturnType;
    rawText: NamespaceDeclarationRawTextReturnType;
    typeName: NamespaceDeclarationTypeNameReturnType;
  };
  NamespaceExportDeclaration: {
    end: NamespaceExportDeclarationEndReturnType;
    flags: NamespaceExportDeclarationFlagsReturnType;
    kind: NamespaceExportDeclarationKindReturnType;
    kindCode: NamespaceExportDeclarationKindCodeReturnType;
    modifiers: NamespaceExportDeclarationModifiersReturnType;
    name: NamespaceExportDeclarationNameReturnType;
    nameText: NamespaceExportDeclarationNameTextReturnType;
    parent: NamespaceExportDeclarationParentReturnType;
    pos: NamespaceExportDeclarationPosReturnType;
    rawText: NamespaceExportDeclarationRawTextReturnType;
    typeName: NamespaceExportDeclarationTypeNameReturnType;
  };
  OptionalTypeNode: {
    end: OptionalTypeNodeEndReturnType;
    flags: OptionalTypeNodeFlagsReturnType;
    kind: OptionalTypeNodeKindReturnType;
    kindCode: OptionalTypeNodeKindCodeReturnType;
    modifiers: OptionalTypeNodeModifiersReturnType;
    name: OptionalTypeNodeNameReturnType;
    nameText: OptionalTypeNodeNameTextReturnType;
    parent: OptionalTypeNodeParentReturnType;
    pos: OptionalTypeNodePosReturnType;
    rawText: OptionalTypeNodeRawTextReturnType;
    type: OptionalTypeNodeTypeReturnType;
    typeName: OptionalTypeNodeTypeNameReturnType;
  };
  ParenthesizedType: {
    end: ParenthesizedTypeEndReturnType;
    flags: ParenthesizedTypeFlagsReturnType;
    kind: ParenthesizedTypeKindReturnType;
    kindCode: ParenthesizedTypeKindCodeReturnType;
    modifiers: ParenthesizedTypeModifiersReturnType;
    name: ParenthesizedTypeNameReturnType;
    nameText: ParenthesizedTypeNameTextReturnType;
    parent: ParenthesizedTypeParentReturnType;
    pos: ParenthesizedTypePosReturnType;
    rawText: ParenthesizedTypeRawTextReturnType;
    type: ParenthesizedTypeTypeReturnType;
    typeName: ParenthesizedTypeTypeNameReturnType;
  };
  PropertyDeclaration: {
    end: PropertyDeclarationEndReturnType;
    flags: PropertyDeclarationFlagsReturnType;
    jsDoc: PropertyDeclarationJsDocReturnType;
    kind: PropertyDeclarationKindReturnType;
    kindCode: PropertyDeclarationKindCodeReturnType;
    modifiers: PropertyDeclarationModifiersReturnType;
    name: PropertyDeclarationNameReturnType;
    nameText: PropertyDeclarationNameTextReturnType;
    parent: PropertyDeclarationParentReturnType;
    pos: PropertyDeclarationPosReturnType;
    questionToken: PropertyDeclarationQuestionTokenReturnType;
    rawText: PropertyDeclarationRawTextReturnType;
    typeName: PropertyDeclarationTypeNameReturnType;
  };
  PropertyLikeDeclaration: {
    end: PropertyLikeDeclarationEndReturnType;
    flags: PropertyLikeDeclarationFlagsReturnType;
    kind: PropertyLikeDeclarationKindReturnType;
    kindCode: PropertyLikeDeclarationKindCodeReturnType;
    modifiers: PropertyLikeDeclarationModifiersReturnType;
    name: PropertyLikeDeclarationNameReturnType;
    nameText: PropertyLikeDeclarationNameTextReturnType;
    parent: PropertyLikeDeclarationParentReturnType;
    pos: PropertyLikeDeclarationPosReturnType;
    rawText: PropertyLikeDeclarationRawTextReturnType;
    typeName: PropertyLikeDeclarationTypeNameReturnType;
  };
  PropertySignature: {
    end: PropertySignatureEndReturnType;
    flags: PropertySignatureFlagsReturnType;
    jsDoc: PropertySignatureJsDocReturnType;
    kind: PropertySignatureKindReturnType;
    kindCode: PropertySignatureKindCodeReturnType;
    modifiers: PropertySignatureModifiersReturnType;
    name: PropertySignatureNameReturnType;
    nameText: PropertySignatureNameTextReturnType;
    parent: PropertySignatureParentReturnType;
    pos: PropertySignaturePosReturnType;
    questionToken: PropertySignatureQuestionTokenReturnType;
    rawText: PropertySignatureRawTextReturnType;
    type: PropertySignatureTypeReturnType;
    typeName: PropertySignatureTypeNameReturnType;
  };
  RestTypeNode: {
    end: RestTypeNodeEndReturnType;
    flags: RestTypeNodeFlagsReturnType;
    kind: RestTypeNodeKindReturnType;
    kindCode: RestTypeNodeKindCodeReturnType;
    modifiers: RestTypeNodeModifiersReturnType;
    name: RestTypeNodeNameReturnType;
    nameText: RestTypeNodeNameTextReturnType;
    parent: RestTypeNodeParentReturnType;
    pos: RestTypeNodePosReturnType;
    rawText: RestTypeNodeRawTextReturnType;
    type: RestTypeNodeTypeReturnType;
    typeName: RestTypeNodeTypeNameReturnType;
  };
  SetAccessorDeclaration: {
    asteriskToken: SetAccessorDeclarationAsteriskTokenReturnType;
    end: SetAccessorDeclarationEndReturnType;
    exclamationToken: SetAccessorDeclarationExclamationTokenReturnType;
    flags: SetAccessorDeclarationFlagsReturnType;
    jsDoc: SetAccessorDeclarationJsDocReturnType;
    kind: SetAccessorDeclarationKindReturnType;
    kindCode: SetAccessorDeclarationKindCodeReturnType;
    modifiers: SetAccessorDeclarationModifiersReturnType;
    name: SetAccessorDeclarationNameReturnType;
    nameText: SetAccessorDeclarationNameTextReturnType;
    parameters: SetAccessorDeclarationParametersReturnType;
    parent: SetAccessorDeclarationParentReturnType;
    pos: SetAccessorDeclarationPosReturnType;
    questionToken: SetAccessorDeclarationQuestionTokenReturnType;
    rawText: SetAccessorDeclarationRawTextReturnType;
    type: SetAccessorDeclarationTypeReturnType;
    typeName: SetAccessorDeclarationTypeNameReturnType;
    typeParameters: SetAccessorDeclarationTypeParametersReturnType;
  };
  StringLiteral: {
    end: StringLiteralEndReturnType;
    flags: StringLiteralFlagsReturnType;
    kind: StringLiteralKindReturnType;
    kindCode: StringLiteralKindCodeReturnType;
    modifiers: StringLiteralModifiersReturnType;
    name: StringLiteralNameReturnType;
    nameText: StringLiteralNameTextReturnType;
    parent: StringLiteralParentReturnType;
    pos: StringLiteralPosReturnType;
    rawText: StringLiteralRawTextReturnType;
    typeName: StringLiteralTypeNameReturnType;
  };
  ThisTypeNode: {
    end: ThisTypeNodeEndReturnType;
    flags: ThisTypeNodeFlagsReturnType;
    kind: ThisTypeNodeKindReturnType;
    kindCode: ThisTypeNodeKindCodeReturnType;
    modifiers: ThisTypeNodeModifiersReturnType;
    name: ThisTypeNodeNameReturnType;
    nameText: ThisTypeNodeNameTextReturnType;
    parent: ThisTypeNodeParentReturnType;
    pos: ThisTypeNodePosReturnType;
    rawText: ThisTypeNodeRawTextReturnType;
    typeName: ThisTypeNodeTypeNameReturnType;
  };
  TupleTypeNode: {
    elementTypes: TupleTypeNodeElementTypesReturnType;
    end: TupleTypeNodeEndReturnType;
    flags: TupleTypeNodeFlagsReturnType;
    kind: TupleTypeNodeKindReturnType;
    kindCode: TupleTypeNodeKindCodeReturnType;
    modifiers: TupleTypeNodeModifiersReturnType;
    name: TupleTypeNodeNameReturnType;
    nameText: TupleTypeNodeNameTextReturnType;
    parent: TupleTypeNodeParentReturnType;
    pos: TupleTypeNodePosReturnType;
    rawText: TupleTypeNodeRawTextReturnType;
    typeName: TupleTypeNodeTypeNameReturnType;
  };
  TypeAliasDeclaration: {
    end: TypeAliasDeclarationEndReturnType;
    flags: TypeAliasDeclarationFlagsReturnType;
    jsDoc: TypeAliasDeclarationJsDocReturnType;
    kind: TypeAliasDeclarationKindReturnType;
    kindCode: TypeAliasDeclarationKindCodeReturnType;
    modifiers: TypeAliasDeclarationModifiersReturnType;
    name: TypeAliasDeclarationNameReturnType;
    nameText: TypeAliasDeclarationNameTextReturnType;
    parent: TypeAliasDeclarationParentReturnType;
    pos: TypeAliasDeclarationPosReturnType;
    rawText: TypeAliasDeclarationRawTextReturnType;
    type: TypeAliasDeclarationTypeReturnType;
    typeName: TypeAliasDeclarationTypeNameReturnType;
    typeParameters: TypeAliasDeclarationTypeParametersReturnType;
  };
  TypeLiteral: {
    end: TypeLiteralEndReturnType;
    flags: TypeLiteralFlagsReturnType;
    kind: TypeLiteralKindReturnType;
    kindCode: TypeLiteralKindCodeReturnType;
    modifiers: TypeLiteralModifiersReturnType;
    name: TypeLiteralNameReturnType;
    nameText: TypeLiteralNameTextReturnType;
    parent: TypeLiteralParentReturnType;
    pos: TypeLiteralPosReturnType;
    rawText: TypeLiteralRawTextReturnType;
    typeName: TypeLiteralTypeNameReturnType;
  };
  TypeReference: {
    end: TypeReferenceEndReturnType;
    flags: TypeReferenceFlagsReturnType;
    kind: TypeReferenceKindReturnType;
    kindCode: TypeReferenceKindCodeReturnType;
    modifiers: TypeReferenceModifiersReturnType;
    name: TypeReferenceNameReturnType;
    nameText: TypeReferenceNameTextReturnType;
    parent: TypeReferenceParentReturnType;
    pos: TypeReferencePosReturnType;
    rawText: TypeReferenceRawTextReturnType;
    text: TypeReferenceTextReturnType;
    typeArguments: TypeReferenceTypeArgumentsReturnType;
    typeName: TypeReferenceTypeNameReturnType;
  };
  UnionType: {
    end: UnionTypeEndReturnType;
    flags: UnionTypeFlagsReturnType;
    kind: UnionTypeKindReturnType;
    kindCode: UnionTypeKindCodeReturnType;
    modifiers: UnionTypeModifiersReturnType;
    name: UnionTypeNameReturnType;
    nameText: UnionTypeNameTextReturnType;
    parent: UnionTypeParentReturnType;
    pos: UnionTypePosReturnType;
    rawText: UnionTypeRawTextReturnType;
    typeName: UnionTypeTypeNameReturnType;
    types: UnionTypeTypesReturnType;
  };
  UNKNOWN_NODE: {
    end: UNKNOWN_NODEEndReturnType;
    flags: UNKNOWN_NODEFlagsReturnType;
    kind: UNKNOWN_NODEKindReturnType;
    kindCode: UNKNOWN_NODEKindCodeReturnType;
    modifiers: UNKNOWN_NODEModifiersReturnType;
    name: UNKNOWN_NODENameReturnType;
    nameText: UNKNOWN_NODENameTextReturnType;
    parent: UNKNOWN_NODEParentReturnType;
    pos: UNKNOWN_NODEPosReturnType;
    rawText: UNKNOWN_NODERawTextReturnType;
    typeName: UNKNOWN_NODETypeNameReturnType;
  };
  VariableDeclaration: {
    end: VariableDeclarationEndReturnType;
    flags: VariableDeclarationFlagsReturnType;
    kind: VariableDeclarationKindReturnType;
    kindCode: VariableDeclarationKindCodeReturnType;
    modifiers: VariableDeclarationModifiersReturnType;
    name: VariableDeclarationNameReturnType;
    nameText: VariableDeclarationNameTextReturnType;
    parent: VariableDeclarationParentReturnType;
    pos: VariableDeclarationPosReturnType;
    rawText: VariableDeclarationRawTextReturnType;
    typeName: VariableDeclarationTypeNameReturnType;
  };
}

export interface GraphQLNexusGenTypes {
  argTypes: GraphQLNexusGenArgTypes;
  backingTypes: GraphQLNexusGenRootTypes;
  returnTypes: GraphQLNexusGenReturnTypes;
  context: t.ContextType;
  enums: {
    NodeFlags: NodeFlags;
    SyntaxKind: SyntaxKind;
  };
  objects: {
    Query: {};
    SourceFile: SourceFileRootType;
    Token: TokenRootType;
    BindingPattern: BindingPatternRootType;
    ComputedPropertyName: ComputedPropertyNameRootType;
    Identifier: IdentifierRootType;
    NumericLiteral: NumericLiteralRootType;
    QualifiedName: QualifiedNameRootType;
    StringLiteralLike: StringLiteralLikeRootType;
    UnnamedNode: UnnamedNodeRootType;
    ArrayTypeNode: ArrayTypeNodeRootType;
    CallSignatureDeclaration: CallSignatureDeclarationRootType;
    ClassDeclaration: ClassDeclarationRootType;
    JSDoc: JSDocRootType;
    ConditionalTypeNode: ConditionalTypeNodeRootType;
    ConstructorDeclaration: ConstructorDeclarationRootType;
    ParameterDeclaration: ParameterDeclarationRootType;
    TypeParameterDeclaration: TypeParameterDeclarationRootType;
    ConstructorTypeNode: ConstructorTypeNodeRootType;
    ConstructSignatureDeclaration: ConstructSignatureDeclarationRootType;
    EnumDeclaration: EnumDeclarationRootType;
    ExportAssignment: ExportAssignmentRootType;
    ExportDeclaration: ExportDeclarationRootType;
    FunctionDeclaration: FunctionDeclarationRootType;
    FunctionTypeNode: FunctionTypeNodeRootType;
    GetAccessorDeclaration: GetAccessorDeclarationRootType;
    ImportDeclaration: ImportDeclarationRootType;
    ImportEqualsDeclaration: ImportEqualsDeclarationRootType;
    ImportTypeNode: ImportTypeNodeRootType;
    IndexedAccessTypeNode: IndexedAccessTypeNodeRootType;
    IndexSignatureDeclaration: IndexSignatureDeclarationRootType;
    InferTypeNode: InferTypeNodeRootType;
    InterfaceDeclaration: InterfaceDeclarationRootType;
    IntersectionTypeNode: IntersectionTypeNodeRootType;
    JSDocAugmentsTag: JSDocAugmentsTagRootType;
    JSDocClassTag: JSDocClassTagRootType;
    JSDocEnumTag: JSDocEnumTagRootType;
    JSDocNamespaceDeclaration: JSDocNamespaceDeclarationRootType;
    JSDocReturnTag: JSDocReturnTagRootType;
    JSDocTemplateTag: JSDocTemplateTagRootType;
    JSDocThisTag: JSDocThisTagRootType;
    JSDocTypeTag: JSDocTypeTagRootType;
    JSDocUnknownTag: JSDocUnknownTagRootType;
    KeywordTypeNode: KeywordTypeNodeRootType;
    LiteralType: LiteralTypeRootType;
    MappedTypeNode: MappedTypeNodeRootType;
    MethodDeclaration: MethodDeclarationRootType;
    MissingDeclaration: MissingDeclarationRootType;
    ModuleDeclaration: ModuleDeclarationRootType;
    NamespaceDeclaration: NamespaceDeclarationRootType;
    NamespaceExportDeclaration: NamespaceExportDeclarationRootType;
    OptionalTypeNode: OptionalTypeNodeRootType;
    ParenthesizedType: ParenthesizedTypeRootType;
    PropertyDeclaration: PropertyDeclarationRootType;
    PropertyLikeDeclaration: PropertyLikeDeclarationRootType;
    PropertySignature: PropertySignatureRootType;
    RestTypeNode: RestTypeNodeRootType;
    SetAccessorDeclaration: SetAccessorDeclarationRootType;
    StringLiteral: StringLiteralRootType;
    ThisTypeNode: ThisTypeNodeRootType;
    TupleTypeNode: TupleTypeNodeRootType;
    TypeAliasDeclaration: TypeAliasDeclarationRootType;
    TypeLiteral: TypeLiteralRootType;
    TypeReference: TypeReferenceRootType;
    UnionType: UnionTypeRootType;
    UNKNOWN_NODE: UNKNOWN_NODERootType;
    VariableDeclaration: VariableDeclarationRootType;
  };
  interfaces: {
    Node: "SourceFile" | "BindingPattern" | "ComputedPropertyName" | "Identifier" | "NumericLiteral" | "QualifiedName" | "StringLiteralLike" | "ArrayTypeNode" | "CallSignatureDeclaration" | "ClassDeclaration" | "ConditionalTypeNode" | "ConstructorDeclaration" | "ParameterDeclaration" | "TypeParameterDeclaration" | "ConstructorTypeNode" | "ConstructSignatureDeclaration" | "EnumDeclaration" | "ExportAssignment" | "ExportDeclaration" | "FunctionDeclaration" | "FunctionTypeNode" | "GetAccessorDeclaration" | "ImportDeclaration" | "ImportEqualsDeclaration" | "ImportTypeNode" | "IndexedAccessTypeNode" | "IndexSignatureDeclaration" | "InferTypeNode" | "InterfaceDeclaration" | "IntersectionTypeNode" | "JSDocNamespaceDeclaration" | "KeywordTypeNode" | "LiteralType" | "MappedTypeNode" | "MethodDeclaration" | "MissingDeclaration" | "ModuleDeclaration" | "NamespaceDeclaration" | "NamespaceExportDeclaration" | "OptionalTypeNode" | "ParenthesizedType" | "PropertyDeclaration" | "PropertyLikeDeclaration" | "PropertySignature" | "RestTypeNode" | "SetAccessorDeclaration" | "StringLiteral" | "ThisTypeNode" | "TupleTypeNode" | "TypeAliasDeclaration" | "TypeLiteral" | "TypeReference" | "UnionType" | "UNKNOWN_NODE" | "VariableDeclaration";
    HasJSDoc: "ClassDeclaration" | "ConstructorDeclaration" | "ParameterDeclaration" | "EnumDeclaration" | "FunctionDeclaration" | "GetAccessorDeclaration" | "IndexSignatureDeclaration" | "InterfaceDeclaration" | "MethodDeclaration" | "ModuleDeclaration" | "NamespaceDeclaration" | "PropertyDeclaration" | "PropertySignature" | "SetAccessorDeclaration" | "TypeAliasDeclaration";
    JSDocTag: "JSDocAugmentsTag" | "JSDocClassTag" | "JSDocEnumTag" | "JSDocReturnTag" | "JSDocTemplateTag" | "JSDocThisTag" | "JSDocTypeTag" | "JSDocUnknownTag";
    MaybeOptional: "ConstructorDeclaration" | "FunctionDeclaration" | "GetAccessorDeclaration" | "MethodDeclaration" | "PropertyDeclaration" | "PropertySignature" | "SetAccessorDeclaration";
  };
  unions: {
    DeclarationName: any;
  };
  scalars: {
    String: any;
    Int: any;
    Boolean: any;
  };
  inputObjects: {};
  allInputTypes: 
    | Extract<keyof GraphQLNexusGenTypes['inputObjects'], string>
    | Extract<keyof GraphQLNexusGenTypes['enums'], string>
    | Extract<keyof GraphQLNexusGenTypes['scalars'], string>;
  allOutputTypes: 
    | Extract<keyof GraphQLNexusGenTypes['objects'], string>
    | Extract<keyof GraphQLNexusGenTypes['enums'], string>
    | Extract<keyof GraphQLNexusGenTypes['unions'], string>
    | Extract<keyof GraphQLNexusGenTypes['interfaces'], string>
    | Extract<keyof GraphQLNexusGenTypes['scalars'], string>;
}

export type Gen = GraphQLNexusGenTypes;
