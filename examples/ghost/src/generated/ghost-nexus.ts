/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ctx from '../data-sources/Context'
import * as db from './ghost-db-types'
import { FieldAuthorizeResolver } from '@nexus/schema/dist/plugins/fieldAuthorizePlugin'
import { core } from '@nexus/schema'
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<core.GetGen3<'inputTypes', TypeName, FieldName>>
    ): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "Date";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: Date
}

export interface NexusGenRootTypes {
  Post: db.Posts
  Query: {}
  User: db.Users
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  String: NexusGenScalars['String']
  Int: NexusGenScalars['Int']
  Float: NexusGenScalars['Float']
  Boolean: NexusGenScalars['Boolean']
  ID: NexusGenScalars['ID']
  Date: NexusGenScalars['Date']
}

export interface NexusGenFieldTypes {
  Post: {
    // field return type
    html: string | null // String
    slug: string | null // String
    title: string | null // String
    uuid: string | null // String
  }
  Query: {
    // field return type
    me: NexusGenRootTypes['User'] | null // User
    postById: NexusGenRootTypes['Post'] | null // Post
    userById: NexusGenRootTypes['User'] | null // User
  }
  User: {
    // field return type
    accessibility: string | null // String
    bio: string | null // String
    coverImage: string | null // String
    createdAt: NexusGenScalars['Date'] | null // Date
    createdBy: NexusGenRootTypes['User'] | null // User
    email: string | null // String
    facebook: string | null // String
    ghostAuthAccessToken: string | null // String
    ghostAuthId: string | null // String
    id: string | null // String
    lastSeen: NexusGenScalars['Date'] | null // Date
    locale: string | null // String
    location: string | null // String
    metaDescription: string | null // String
    metaTitle: string | null // String
    name: string | null // String
    profileImage: string | null // String
    slug: string | null // String
    status: string | null // String
    tour: string | null // String
    twitter: string | null // String
    updatedAt: NexusGenScalars['Date'] | null // Date
    updatedBy: string | null // String
    visibility: string | null // String
    website: string | null // String
  }
}

export interface NexusGenArgTypes {
  Query: {
    postById: {
      // args
      id: string // ID!
    }
    userById: {
      // args
      id: string // ID!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = 'Post' | 'Query' | 'User'

export type NexusGenInputNames = never

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = 'Boolean' | 'Date' | 'Float' | 'ID' | 'Int' | 'String'

export type NexusGenUnionNames = never

export interface NexusGenTypes {
  context: ctx.Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  allTypes: NexusGenAllTypes
  inheritedFields: NexusGenInheritedFields
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginSchemaConfig {}
}
